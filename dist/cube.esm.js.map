{"version":3,"file":"cube.esm.js","sources":["../src/errors.js","../src/console.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/const.js","../src/InputMember.js","../src/DimensionTable.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/FactTable.js","../src/SnowflakeBuilder.js","../src/Tuple.js","../src/Space.js","../src/Cube.js"],"sourcesContent":["export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class CreateInstanceException {\n\tconstructor() {\n\t\tthis.message = 'this must have prototype of Cube'\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n\tstatic create(id, props, data, primaryKey) {\n\t\tif (!(this === Member || Member.isPrototypeOf(this))) {\n\t\t\tthrow Error('this.constructor must be prototype of Member')\n\t\t}\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn new this(memberData)\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {\n\tstatic create(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\treturn super.create(id, memberData, defaultData, primaryKey)\n\t}\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport InputMember from './InputMember.js'\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberId(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = InputMember.create(id, keys, memberData, primaryKey);\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * Search method\n\t * @return {Tree|undefined}\n\t * */\n\tsearchTreeByTreeValue(callback) {\n\t\tlet search = void 0;\n\t\tthis.tracePostOrder((treeValue, tree) => {\n\t\t\tif (callback(tree)) {\n\t\t\t\tsearch = tree\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst parentNode = tree.getParentTree();\n\t\t\tcallback(tree);\n\t\t\tif (parentNode !== null) {\n\t\t\t\treqursively(parentNode);\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcallback(treeValue, tree);\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tcallback(treeValue, tree);\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * Check if some thee is present in childs of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasChild(tree) {\n\t\tlet has = false;\n\t\tthis.tracePreOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n\t/**\n\t * Check if some thee is present in parents of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasParent(tree) {\n\t\tlet has = false;\n\t\tthis.traceUpOrder((tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validate();\n\t}\n\tvalidate(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder((tracedDimensionTreeValue) => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder((tracedTreeValue) => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\treturn this.getRoot().searchTreeByTreeValue(dimensionTree => {\n\t\t\tconst dimensionTreeValue = dimensionTree.getTreeValue();\n\t\t\treturn dimensionTreeValue.dimension === dimension;\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\t// насытить связными данными снизу\n\tprojectDrillDown(dimensionTree, member){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\t// 2 trace up\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\n\t\t\t// 3 get drill down of last members\n\t\t\tconst drillDownedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree.drillDownDimensionMembers(lastTracedMembers);\n\n\t\t\t// 4 set members\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillDownedMembers);\n\n\t\t\t// 5 save current dimension and drill downed members\n\t\t\tlastTracedMembers = drillDownedMembers;\n\t\t\tlastTracedDimensionTree = tracedTree;\n\t\t});\n\t}\n\t// насытить связными данными сверху\n\tprojectDrillUp(dimensionTree, member){\n\t\tlet lastTracedMembers2;\n\t\tlet lastTracedDimensionTree2;\n\t\tthis.tracePreOrder((b, tracedTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\t\t\tconst drillUppedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree2.drillUpDimensionMembers(lastTracedMembers2);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillUppedMembers);\n\n\t\t\tlastTracedMembers2 = drillUppedMembers;\n\t\t\tlastTracedDimensionTree2 = tracedTree;\n\t\t})\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tdimensionTable.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// if (memberList.length === 1){\n\t\t// \tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t// \t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t// \t\ttoBeAddedSpace[childDimension] = childMembers;\n\t\t// \t})\n\t\t// }\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst { members: parentMembers, primaryKey } = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst drillDownMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (parentMember[foreignKey] === member[primaryKey]) {\n\t\t\t\t\tif (drillDownMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillDownMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillDownMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTree = this.getChildTrees()[0]; // for one child always\n\t\tconst dimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers, foreignKey } = dimensionTable;\n\t\tconst rollUpMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (member[foreignKey] === dimensionTable.getMemberId(childMember)) {\n\t\t\t\t\tif (rollUpMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\trollUpMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn rollUpMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","import Fact from './Fact.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport {NotFoundFactId} from './errors.js'\n\n/**\n * @throw {NotFoundFactId}\n * */\nexport default class FactTable {\n\tconstructor({ facts = [], primaryKey = DEFAULT_FACT_ID_PROP } = {}, defaultFactOptions = {}) {\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.facts = facts.map(factData => new Fact(factData));\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.facts.forEach(this.validateFactData.bind(this))\n\t}\n\tgetFacts() {\n\t\treturn this.facts;\n\t}\n\tvalidateFactData(factData) {\n\t\tif (!factData.hasOwnProperty(this.primaryKey)) {\n\t\t\tthrow new NotFoundFactId(this.primaryKey)\n\t\t}\n\t}\n\tstatic deleteProps(fact, props, primaryKey) {\n\t\tprops.forEach(prop => {\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tdelete fact[prop];\n\t\t\t}\n\t\t});\n\t}\n}\n","import FactTable from './FactTable.js'\nimport Member from './Member.js'\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet members;\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tmembers = SnowflakeBuilder.makeMemberList.apply(null, args);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(childDimensions[0]).getTreeValue();\n\t\t\tconst memberListForFilter = dimensionTable.members;\n\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttributes[0], cells, memberListForFilter, dimensionTable);\n\t\t\tmembers = SnowflakeBuilder.makeMemberListLevel.apply(null, args.concat([childIdAttributes, entitiesParts]));\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tFactTable.deleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tFactTable.deleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\tmembers.forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberId(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\t/**\n\t * @private\n\t * */\n\tstatic makeMemberListLevel(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, whatIsIt, dimension, keyProps, otherProps, cells, cellTable, childIdAttributes, entitiesParts) {\n\t\tlet totalMemberList = [];\n\n\t\tlet countId = 0;\n\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\tif (entitiesPart.length) {\n\t\t\t\tconst members = SnowflakeBuilder.makeMemberList(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, entitiesPart, dimension, keyProps, otherProps, cells, cellTable, countId);\n\t\t\t\tcountId = countId + members.length;\n\n\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\tchildIdAttributes.forEach(childIdAttribute => {\n\n\t\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\tmember[primaryKey] = (existMemberCount + totalMemberList.length + 1);\n\t\t\t\t\t\ttotalMemberList.push(member)\n\t\t\t\t\t});\n\n\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totalMemberList;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic makeMemberList(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst cache = {};\n\t\tconst restoredCache = {};\n\t\tconst members = [];\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in cache) && !(surrogateKey in restoredCache)) {\n\t\t\t\tcache[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = cache[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\n\t\tObject.keys(cache).forEach(key => {\n\t\t\tconst id = cache[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst member = Member.create(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\t\t\tmembers.push(member);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst factTable = new FactTable();\n\t\tconst facts = factTable.getFacts();\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTree, cell) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberId(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((value, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTree, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport FactTable from './FactTable.js'\nimport {\n\tInsufficientRollupData,\n\tCreateInstanceException\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\n\nclass CellTable {\n\tconstructor({ cells, primaryKey, defaultFactOptions = {} }) {\n\t\tthis.cells = cells.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t}\n}\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * @param {{snowflake, dimensionHierarchies}|Cube} factTable - facts which will be subject to analysis\n * */\nclass Cube {\n\tconstructor(cube) {\n\t\tlet { dimensionHierarchies = [], cellTable = {} } = cube;\n\t\tif (Array.isArray(cellTable)) {\n\t\t\tcellTable = { cells: cellTable };\n\t\t\tconsole.warnOnce('first argument \\\"cells\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { cells = [], primaryKey = DEFAULT_FACT_ID_PROP, defaultFactOptions = {} } = cellTable;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.cellTable = new CellTable({ cells, primaryKey, defaultFactOptions: {...defaultFactOptions} });\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * @public\n\t * Fabric method for creating cube from facts and dimensionHierarchiesData data\n\t * @param {object} factTable\n\t * @param {object} dimensionHierarchies\n\t * @return {Cube}\n\t * */\n\tstatic create(factTable, dimensionHierarchies = []) {\n\t\tif (Array.isArray(factTable)) {\n\t\t\tfactTable = { facts: factTable };\n\t\t\tconsole.warnOnce('first argument \\\"facts\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { facts = [], primaryKey, defaultFactOptions = {} } = factTable;\n\t\tif (!(Cube.isPrototypeOf(this) || Cube === this)) {\n\t\t\tthrow new CreateInstanceException()\n\t\t}\n\n\t\tconst cube = new this({\n\t\t\tcellTable: { primaryKey, defaultFactOptions },\n\t\t\tdimensionHierarchies: dimensionHierarchies,\n\t\t});\n\n\t\t// build 2: members\n\t\tcube.addFacts(facts);\n\n\t\treturn cube;\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * */\n\tdice(set) {\n\t\t// 1 make one projection on to member\n\t\tconst fixSpace = {};\n\t\tObject.keys(set).forEach(dimension => {\n\t\t\t// work with arrays\n\t\t\tfixSpace[dimension] = Array.isArray(set[dimension])\n\t\t\t\t? set[dimension]\n\t\t\t\t: [set[dimension]];\n\n\t\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\t\t\n\t\t\t// discard non-existent dimensions\n\t\t\tif (!dimensionTree) {\n\t\t\t\tconsole.warn(`Not existed dimension: ${dimension}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tfixSpace[dimension].forEach((memberData, index) => {\n\t\t\t\tconst members = this.getDimensionMembers(dimension);\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberId(member) === dimensionTable.getMemberId(memberData));\n\t\t\t\tfixSpace[dimension][index] = member;\n\t\t\t\tif (!memberData) {\n\t\t\t\t\tconsole.warn(`Not found member by id ${dimensionTable.getMemberId(member)}`)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (Object.keys(fixSpace).length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = Object.keys(fixSpace).map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = fixSpace[dimension].map(member => {\n\n\t\t\t\tlet searchedInTree = findDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {FactTable} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tconst newFactTable = new FactTable({facts, primaryKey: this.cellTable.primaryKey});\n\t\tconst cells = newFactTable.getFacts().map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.cellTable.primaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * */\n\tremoveFacts(facts) {\n\t\tconst cellTable = this.getCells();\n\t\tconst primaryKey = this.cellTable.primaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[primaryKey] === fact[primaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable.cells;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * */\n\tremoveCells(cells) {\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\treturn findDimensionTreeByDimension.call(this, dimension).getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData) {\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tif (typeof dimension !== 'string') {\n\t\t\tthrow TypeError(`parameter dimension expects as string: ${dimension}`)\n\t\t}\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberId(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder(tracedDimensionTree => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTree.getTreeValue();\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberId(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberId(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.cellTable.primaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tcreateEmptyCells(cellOptions) {\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(combination => {\n\t\t\tconst unique = this.dice(combination).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tlet foreignKeysCellData = {};\n\t\t\t\tObject.keys(combination).forEach(dimension => {\n\t\t\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberId(combination[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {...foreignKeysCellData, ...cellOptions};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tCube.validateInstance(emptyCells);\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} customCellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(customCellOptions = {}) {\n\t\tconst cellOptions = {...this.cellTable.defaultFactOptions, ...customCellOptions};\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\tstatic validateInstance(emptyCells) {\n\t\temptyCells.forEach(emptyCell => {\n\t\t\tif (!(emptyCell instanceof EmptyCell)) {\n\t\t\t\tthrow new TypeError('some item in list of argument is not instances of EmptyCell')\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t *\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction findDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.cellTable.primaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nexport default Cube\n"],"names":["console"],"mappings":"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"}