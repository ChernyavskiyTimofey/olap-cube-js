{"version":3,"file":"cube.min.js","sources":["../src/console.js","../src/errors.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/InputMember.js","../src/DimensionTable.js","../src/const.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/SnowflakeBuilder.js","../src/Tuple.js","../src/Space.js","../node_modules/lodash-es/_freeGlobal.js","../node_modules/lodash-es/_root.js","../node_modules/lodash-es/_Symbol.js","../node_modules/lodash-es/_getRawTag.js","../node_modules/lodash-es/_objectToString.js","../node_modules/lodash-es/_baseGetTag.js","../node_modules/lodash-es/_getPrototype.js","../node_modules/lodash-es/_overArg.js","../node_modules/lodash-es/isPlainObject.js","../node_modules/lodash-es/isObjectLike.js","../src/Cube.js"],"sourcesContent":["const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n\tstatic create(id, props, data, primaryKey) {\n\t\tif (!(this === Member || Member.isPrototypeOf(this))) {\n\t\t\tthrow Error('this.constructor must be prototype of Member')\n\t\t}\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn new this(memberData)\n\t}\n}\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {\n\tstatic create(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\treturn super.create(id, memberData, defaultData, primaryKey)\n\t}\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport InputMember from './InputMember.js'\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberPrimaryKey(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\tgetMemberForeignKey(member) {\n\t\treturn member[this.foreignKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = InputMember.create(id, keys, memberData, primaryKey);\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\tconst tree = this;\n\t\tconst parentTree = tree.getParentTree();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (parentTree !== null) {\n\t\t\tparentTree.traceUpOrder(callback);\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePostOrder(callback);\n\t\t\t});\n\t\t}\n\t\tcallback(treeValue, tree);\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePreOrder(callback);\n\t\t\t});\n\t\t}\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validateDimensions();\n\t}\n\tvalidateDimensions(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder(tracedDimensionTreeValue => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\t// todo add validation\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder(tracedTreeValue => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\tconst root = this.getRoot();\n\t\tlet search = void 0;\n\t\troot.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tif (dimensionTreeValue.dimension === dimension){\n\t\t\t\tsearch = dimensionTree;\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\tprojectDrillDown(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"traceUpOrder\", \"drillDownDimensionMembers\")\n\t}\n\tprojectDrillUp(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"tracePreOrder\", \"drillUpDimensionMembers\")\n\t}\n\tprojectDrill(dimensionTree, member, traceMethodName, method){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\tthis[traceMethodName]((tracedDimensionTreeValue, tracedDimensionTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedDimensionTreeValue;\n\n\t\t\tconst drillMembers = tracedDimensionTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree[method](lastTracedMembers);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillMembers);\n\n\t\t\tlastTracedMembers = drillMembers;\n\t\t\tlastTracedDimensionTree = tracedDimensionTree;\n\t\t});\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder(dimensionTreeValue => {\n\t\t\tdimensionTreeValue.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = tracedDimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst parentDimensionTable = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { members: parentMembers } = parentDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (dimensionTable.getMemberForeignKey(parentMember) === parentDimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\tif (drillMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTree = this.getChildTrees()[0]; // for one child always\n\t\tconst childDimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers } = childDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (childDimensionTable.getMemberForeignKey(member) === childDimensionTable.getMemberPrimaryKey(childMember)) {\n\t\t\t\t\tif (drillMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","import Member from './Member.js'\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet members;\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tmembers = SnowflakeBuilder.makeMemberList.apply(null, args);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(childDimensions[0]).getTreeValue();\n\t\t\tconst memberListForFilter = dimensionTable.members;\n\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttributes[0], cells, memberListForFilter, dimensionTable);\n\t\t\tmembers = SnowflakeBuilder.makeMemberListLevel.apply(null, args.concat([childIdAttributes, entitiesParts]));\n\t\t}\n\n\t\tfunction deleteProps(fact, props, factPrimaryKey) {\n\t\t\tprops.forEach(prop => {\n\t\t\t\tif (prop !== factPrimaryKey) {\n\t\t\t\t\tdelete fact[prop];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tdeleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tdeleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\tmembers.forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\t/**\n\t * @private\n\t * */\n\tstatic makeMemberListLevel(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, whatIsIt, dimension, keyProps, otherProps, cells, cellTable, childIdAttributes, entitiesParts) {\n\t\tlet totalMemberList = [];\n\n\t\tlet countId = 0;\n\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\tif (entitiesPart.length) {\n\t\t\t\tconst members = SnowflakeBuilder.makeMemberList(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, entitiesPart, dimension, keyProps, otherProps, cells, cellTable, countId);\n\t\t\t\tcountId = countId + members.length;\n\n\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\tchildIdAttributes.forEach(childIdAttribute => {\n\n\t\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\tmember[primaryKey] = (existMemberCount + totalMemberList.length + 1);\n\t\t\t\t\t\ttotalMemberList.push(member)\n\t\t\t\t\t});\n\n\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totalMemberList;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic makeMemberList(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst cache = {};\n\t\tconst restoredCache = {};\n\t\tconst members = [];\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in cache) && !(surrogateKey in restoredCache)) {\n\t\t\t\tcache[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = cache[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\n\t\tObject.keys(cache).forEach(key => {\n\t\t\tconst id = cache[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst member = Member.create(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\t\t\tmembers.push(member);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst facts = [];\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTable, cell) => {\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberPrimaryKey(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTable, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport {\n\tInsufficientRollupData,\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport isPlainObject from \"./../node_modules/lodash-es/isPlainObject.js\"\nimport {NotFoundFactId} from \"./errors.js\";\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * */\nclass Cube {\n\t/**\n\t * @param {object | Cube} cube\n\t * @throw {TypeError}\n\t * */\n\tconstructor(cube = {}) {\n\t\tif (!(isPlainObject(cube) || cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be plain object or instance of Cube')\n\t\t}\n\t\tlet {\n\t\t\tdimensionHierarchies = [],\n\t\t\tcellTable = [],\n\t\t\tdefaultFactOptions = {},\n\t\t\tfactPrimaryKey = DEFAULT_FACT_ID_PROP\n\t\t} = cube;\n\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.factPrimaryKey = factPrimaryKey;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.cellTable = cellTable.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * @throw {TypeError}\n\t * @throw {RangeError}\n\t * */\n\tdice(set) {\n\t\tif (!(isPlainObject(set) || set instanceof Tuple)){\n\t\t\tthrow TypeError(\"The argument must be a plain object\")\n\t\t}\n\t\t\n\t\t// always work with arrays as value\n\t\tconst toMultiset = (value) => {\n\t\t\treturn Array.isArray(value) ? value : [value];\n\t\t};\n\t\t\n\t\t// change member data to original member objects\n\t\tconst toOriginal = (membersData, dimension) => {\n\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst members = dimensionTable.members;\n\t\t\t//replace memberData with original members\n\t\t\tmembersData.forEach((memberData, index) => {\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberPrimaryKey(member) === dimensionTable.getMemberPrimaryKey(memberData));\n\t\t\t\tif (!member) {\n\t\t\t\t\tthrow RangeError(`Not found member by id ${dimensionTable.getMemberPrimaryKey(member)}`)\n\t\t\t\t}\n\t\t\t\tif (membersData instanceof Member){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmembersData[index] = member;\n\t\t\t});\n\t\t\treturn membersData;\n\t\t};\n\t\t\n\t\tconst originalMultiset = {};\n\t\tObject.keys(set).forEach((dimension) => {\n\t\t\tlet value = set[dimension];\n\t\t\tvalue = toMultiset(value);\n\t\t\tvalue = toOriginal(value, dimension);\n\t\t\toriginalMultiset[dimension] = value;\n\t\t});\n\t\t\n\t\tconst dimensions = Object.keys(originalMultiset);\n\t\t\n\t\t// 1 make one projection on to member\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (dimensions.length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = dimensions.map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\tconst members = originalMultiset[dimension];\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = members.map(member => {\n\n\t\t\t\tlet searchedInTree = getDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {Fact[]} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tfacts.forEach(validateFactData.bind(null, this.factPrimaryKey));\n\t\tconst cells = facts.map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.factPrimaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * */\n\tremoveFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tconst cellTable = this.getCells();\n\t\tconst factPrimaryKey = this.factPrimaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[factPrimaryKey] === fact[factPrimaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * @throw {TypeError}\n\t * */\n\tremoveCells(cells) {\n\t\tif (!Array.isArray(cells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tcells.forEach((cell) => {\n\t\t\tif (!(cell instanceof Cell)){\n\t\t\t\tthrow TypeError('The list of cells must contain only instances of Cell and EmptyCell')\n\t\t\t}\n\t\t});\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * @throw {TypeError}\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be string')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\treturn dimensionTree.getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData = {}) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(\n\t\t\tisPlainObject(customMemberOptions)\n\t\t\t&& isPlainObject(rollupCoordinatesData)\n\t\t\t&& isPlainObject(drillDownCoordinatesOptions)\n\t\t\t&& isPlainObject(cellData)\n\t\t)){\n\t\t\tthrow TypeError('The arguments after the first must be plain objects')\n\t\t}\n\t\t\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberPrimaryKey(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTable;\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberPrimaryKey(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * throw {TypeError}\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(member instanceof Member)){\n\t\t\tthrow TypeError('The second argument must be instance of Member')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * @throw {TypeError}\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.factPrimaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\tif (!(dimensionHierarchy instanceof DimensionTree)){\n\t\t\tthrow TypeError('The argument must be instance of DimensionTree')\n\t\t}\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * @throw {TypeError}\n\t * */\n\tcreateEmptyCells(cellOptions = {}) {\n\t\tif (!isPlainObject(cellOptions)){\n\t\t\tthrow TypeError('Cell option argument must be a pure object')\n\t\t}\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(tuple => {\n\t\t\tconst unique = this.dice(tuple).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tconst foreignKeysCellData = {};\n\t\t\t\tObject.keys(tuple).forEach(dimension => {\n\t\t\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberPrimaryKey(tuple[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {\n\t\t\t\t\t...this.defaultFactOptions,\n\t\t\t\t\t...cellOptions,\n\t\t\t\t\t...foreignKeysCellData,\n\t\t\t\t};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют, для этого нужна инф-ия о именах таких полей в схеме\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @param {Cell} cell\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tif (!Array.isArray(emptyCells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\temptyCells.forEach((emptyCell, index) => {\n\t\t\tif (!this.isEmptyCell(emptyCell)) {\n\t\t\t\tthrow TypeError(`Some item in list of argument is not instances of EmptyCell, index: ${index}`)\n\t\t\t}\n\t\t});\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} cellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(cellOptions) {\n\t\t// todo why here residuals? add test for that\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * Check that the argument is an instance of SubCube\n\t * @return {boolean}\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tif (!(cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be instance of Cube')\n\t\t}\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction getDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\tif (!findDimensionTree) {\n\t\tthrow RangeError(`Not existed dimension: ${dimension}`);\n\t}\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.factPrimaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nfunction validateFactData(factPrimaryKey, factData){\n\tif (!factData.hasOwnProperty(factPrimaryKey)) {\n\t\tthrow new NotFoundFactId(factPrimaryKey)\n\t}\n}\n\nexport default Cube"],"names":["memory","InsufficientRollupData","dimension","id","message","NotFoundFactId","name","DimensionException","originalConsole","console","customConsole","string","warn","Fact","data","key","hasOwnProperty","value","type","error","handleError","Cell","EmptyCell","options","generateId","cell","replace","c","r","Math","random","toString","Member","Object","assign","this","props","primaryKey","isPrototypeOf","Error","memberData","forEach","prop","InputMember","defaultData","propName","DimensionTable","foreignKey","genericId","keyProps","otherProps","members","defaultMemberOptions","keys","indexOf","concat","map","_this","splice","apply","length","member","push","log","memberOptions","linkProps","reduceId","create","addMember","index","reduce","acc","curValue","dimensionTable","Tree","getChildTrees","getParentTree","root","traceUpOrder","tracedTreeValue","tracedTree","isRoot","callback","parentTree","getTreeValue","childTrees","treeValue","childTree","tracePostOrder","tracePreOrder","DimensionTree","dimensionTree","level","parentNode","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validateDimensions","dimensions","tracedDimensionTreeValue","getRoot","search","dimensionTreeValue","newDimensionTreeByMember","cloneDimensionTreeWithoutMembers","projectDrillDown","projectDrillUp","projectDrill","traceMethodName","method","lastTracedMembers","lastTracedDimensionTree","tracedDimensionTree","tracedDimension","drillMembers","_this2","getDimensionTreeByDimension","setMemberList","clone","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","tracedDimensionTable","childMembers","childDimension","_this3","removeMember","toBeAddedSpace","_this4","parentDimensionTable","parentMembers","parentMember","getMemberForeignKey","getMemberPrimaryKey","isExternal","childDimensionTable","childMember","childIdAttributes","createMember","newDimensionTree","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","anotherBuildOne","processDimension","memberList","childDimensions","existMemberCount","args","entitiesParts","memberListForFilter","mapFilter","makeMemberListLevel","makeMemberList","deleteProps","fact","cellTables","cellTableFiltered","filter","whatIsIt","totalMemberList","countId","entitiesPart","etalon","childIdAttribute","entityPart","startFrom","cache","restoredCache","find","surrogateKey","createKeyFromProps","obj","join","removedCells","dimensionHierarchies","cube","removedCell","travers","removeMembers","bind","restoreCell","dimensionTrees","facts","memberCopy","deleteMemberId","dicedCube","dice","getCells","handlers","idValue","handler","Tuple","Space","newSpace","arguments","space","add","targetSpace","otherSpace","Array","prototype","freeGlobal","global","freeSelf","self","Symbol","Function","objectProto","nativeObjectToString","symToStringTag","toStringTag","undefined","nullTag","undefinedTag","baseGetTag","isOwn","call","tag","e","result","getRawTag","func","transform","getPrototype","getPrototypeOf","arg","objectTag","funcProto","funcToString","objectCtorString","isPlainObject","_typeof","proto","Ctor","constructor","Cube","TypeError","defaultFactOptions","createDimensionHierarchy","cellData","isEmptyCell","set","originalMultiset","membersData","isArray","RangeError","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","union","filteredCellTable","cellBelongsToSpace","some","newDimensionHierarchies","originalDimensionHierarchy","finded","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","forSave","denormalize","getDimensionTrees","_this6","factData","getFacts","anotherBuild","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","getDimensionMembers","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","destroyDimensionTree","cellOptions","emptyCells","cartesian","tuple","foreignKeysCellData","createEmptyCell","emptyCell","tuples","totalTuples","createEmptyCells","addEmptyCells","a","b","d","dimensionsOrder","tupleList","i","arr","item","rest","findDimensionTree","getDimensionTree"],"mappings":"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"}