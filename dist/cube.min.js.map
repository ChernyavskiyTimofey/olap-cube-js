{"version":3,"file":"cube.min.js","sources":["../src/console.js","../src/errors.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/InputMember.js","../src/DimensionTable.js","../src/const.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/FactTable.js","../src/SnowflakeBuilder.js","../src/Tuple.js","../src/Space.js","../src/Cube.js"],"sourcesContent":["const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class CreateInstanceException {\n\tconstructor() {\n\t\tthis.message = 'this must have prototype of Cube'\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n\tstatic create(id, props, data, primaryKey) {\n\t\tif (!(this === Member || Member.isPrototypeOf(this))) {\n\t\t\tthrow Error('this.constructor must be prototype of Member')\n\t\t}\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn new this(memberData)\n\t}\n}\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {\n\tstatic create(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\treturn super.create(id, memberData, defaultData, primaryKey)\n\t}\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport InputMember from './InputMember.js'\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberId(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = InputMember.create(id, keys, memberData, primaryKey);\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * Search method\n\t * @return {Tree|undefined}\n\t * */\n\tsearchTreeByTreeValue(callback) {\n\t\tlet search = void 0;\n\t\tthis.tracePostOrder((treeValue, tree) => {\n\t\t\tif (callback(tree)) {\n\t\t\t\tsearch = tree\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst parentNode = tree.getParentTree();\n\t\t\tcallback(tree);\n\t\t\tif (parentNode !== null) {\n\t\t\t\treqursively(parentNode);\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcallback(treeValue, tree);\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tcallback(treeValue, tree);\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * Check if some thee is present in childs of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasChild(tree) {\n\t\tlet has = false;\n\t\tthis.tracePreOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n\t/**\n\t * Check if some thee is present in parents of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasParent(tree) {\n\t\tlet has = false;\n\t\tthis.traceUpOrder((tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validate();\n\t}\n\tvalidate(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder((tracedDimensionTreeValue) => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder((tracedTreeValue) => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\treturn this.getRoot().searchTreeByTreeValue(dimensionTree => {\n\t\t\tconst dimensionTreeValue = dimensionTree.getTreeValue();\n\t\t\treturn dimensionTreeValue.dimension === dimension;\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\t// насытить связными данными снизу\n\tprojectDrillDown(dimensionTree, member){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\t// 2 trace up\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\n\t\t\t// 3 get drill down of last members\n\t\t\tconst drillDownedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree.drillDownDimensionMembers(lastTracedMembers);\n\n\t\t\t// 4 set members\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillDownedMembers);\n\n\t\t\t// 5 save current dimension and drill downed members\n\t\t\tlastTracedMembers = drillDownedMembers;\n\t\t\tlastTracedDimensionTree = tracedTree;\n\t\t});\n\t}\n\t// насытить связными данными сверху\n\tprojectDrillUp(dimensionTree, member){\n\t\tlet lastTracedMembers2;\n\t\tlet lastTracedDimensionTree2;\n\t\tthis.tracePreOrder((b, tracedTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\t\t\tconst drillUppedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree2.drillUpDimensionMembers(lastTracedMembers2);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillUppedMembers);\n\n\t\t\tlastTracedMembers2 = drillUppedMembers;\n\t\t\tlastTracedDimensionTree2 = tracedTree;\n\t\t})\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tdimensionTable.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// if (memberList.length === 1){\n\t\t// \tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t// \t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t// \t\ttoBeAddedSpace[childDimension] = childMembers;\n\t\t// \t})\n\t\t// }\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst { members: parentMembers, primaryKey } = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst drillDownMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (parentMember[foreignKey] === member[primaryKey]) {\n\t\t\t\t\tif (drillDownMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillDownMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillDownMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTree = this.getChildTrees()[0]; // for one child always\n\t\tconst dimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers, foreignKey } = dimensionTable;\n\t\tconst rollUpMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (member[foreignKey] === dimensionTable.getMemberId(childMember)) {\n\t\t\t\t\tif (rollUpMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\trollUpMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn rollUpMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","import Fact from './Fact.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport {NotFoundFactId} from './errors.js'\n\n/**\n * @throw {NotFoundFactId}\n * */\nexport default class FactTable {\n\tconstructor({ facts = [], primaryKey = DEFAULT_FACT_ID_PROP } = {}, defaultFactOptions = {}) {\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.facts = facts.map(factData => new Fact(factData));\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.facts.forEach(this.validateFactData.bind(this))\n\t}\n\tgetFacts() {\n\t\treturn this.facts;\n\t}\n\tvalidateFactData(factData) {\n\t\tif (!factData.hasOwnProperty(this.primaryKey)) {\n\t\t\tthrow new NotFoundFactId(this.primaryKey)\n\t\t}\n\t}\n\tstatic deleteProps(fact, props, primaryKey) {\n\t\tprops.forEach(prop => {\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tdelete fact[prop];\n\t\t\t}\n\t\t});\n\t}\n}\n","import FactTable from './FactTable.js'\nimport Member from './Member.js'\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet members;\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tmembers = SnowflakeBuilder.makeMemberList.apply(null, args);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(childDimensions[0]).getTreeValue();\n\t\t\tconst memberListForFilter = dimensionTable.members;\n\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttributes[0], cells, memberListForFilter, dimensionTable);\n\t\t\tmembers = SnowflakeBuilder.makeMemberListLevel.apply(null, args.concat([childIdAttributes, entitiesParts]));\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tFactTable.deleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tFactTable.deleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\tmembers.forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberId(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\t/**\n\t * @private\n\t * */\n\tstatic makeMemberListLevel(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, whatIsIt, dimension, keyProps, otherProps, cells, cellTable, childIdAttributes, entitiesParts) {\n\t\tlet totalMemberList = [];\n\n\t\tlet countId = 0;\n\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\tif (entitiesPart.length) {\n\t\t\t\tconst members = SnowflakeBuilder.makeMemberList(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, entitiesPart, dimension, keyProps, otherProps, cells, cellTable, countId);\n\t\t\t\tcountId = countId + members.length;\n\n\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\tchildIdAttributes.forEach(childIdAttribute => {\n\n\t\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\tmember[primaryKey] = (existMemberCount + totalMemberList.length + 1);\n\t\t\t\t\t\ttotalMemberList.push(member)\n\t\t\t\t\t});\n\n\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totalMemberList;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic makeMemberList(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst cache = {};\n\t\tconst restoredCache = {};\n\t\tconst members = [];\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in cache) && !(surrogateKey in restoredCache)) {\n\t\t\t\tcache[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = cache[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\n\t\tObject.keys(cache).forEach(key => {\n\t\t\tconst id = cache[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst member = Member.create(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\t\t\tmembers.push(member);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst factTable = new FactTable();\n\t\tconst facts = factTable.getFacts();\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTree, cell) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberId(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((value, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTree, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport FactTable from './FactTable.js'\nimport {\n\tInsufficientRollupData,\n\tCreateInstanceException\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\n\nclass CellTable {\n\tconstructor({ cells, primaryKey, defaultFactOptions = {} }) {\n\t\tthis.cells = cells.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t}\n}\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * @param {{snowflake, dimensionHierarchies}|Cube} factTable - facts which will be subject to analysis\n * */\nclass Cube {\n\tconstructor(cube) {\n\t\tlet { dimensionHierarchies = [], cellTable = {} } = cube;\n\t\tif (Array.isArray(cellTable)) {\n\t\t\tcellTable = { cells: cellTable };\n\t\t\tconsole.warnOnce('first argument \\\"cells\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { cells = [], primaryKey = DEFAULT_FACT_ID_PROP, defaultFactOptions = {} } = cellTable;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.cellTable = new CellTable({ cells, primaryKey, defaultFactOptions: {...defaultFactOptions} });\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * @public\n\t * Fabric method for creating cube from facts and dimensionHierarchiesData data\n\t * @param {object} factTable\n\t * @param {object} dimensionHierarchies\n\t * @return {Cube}\n\t * */\n\tstatic create(factTable, dimensionHierarchies = []) {\n\t\tif (Array.isArray(factTable)) {\n\t\t\tfactTable = { facts: factTable };\n\t\t\tconsole.warnOnce('first argument \\\"facts\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { facts = [], primaryKey, defaultFactOptions = {} } = factTable;\n\t\tif (!(Cube.isPrototypeOf(this) || Cube === this)) {\n\t\t\tthrow new CreateInstanceException()\n\t\t}\n\n\t\tconst cube = new this({\n\t\t\tcellTable: { primaryKey, defaultFactOptions },\n\t\t\tdimensionHierarchies: dimensionHierarchies,\n\t\t});\n\n\t\t// build 2: members\n\t\tcube.addFacts(facts);\n\n\t\treturn cube;\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * */\n\tdice(set) {\n\t\t// 1 make one projection on to member\n\t\tconst fixSpace = {};\n\t\tObject.keys(set).forEach(dimension => {\n\t\t\t// work with arrays\n\t\t\tfixSpace[dimension] = Array.isArray(set[dimension])\n\t\t\t\t? set[dimension]\n\t\t\t\t: [set[dimension]];\n\n\t\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\t\t\n\t\t\t// discard non-existent dimensions\n\t\t\tif (!dimensionTree) {\n\t\t\t\tconsole.warn(`Not existed dimension: ${dimension}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tfixSpace[dimension].forEach((memberData, index) => {\n\t\t\t\tconst members = this.getDimensionMembers(dimension);\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberId(member) === dimensionTable.getMemberId(memberData));\n\t\t\t\tfixSpace[dimension][index] = member;\n\t\t\t\tif (!memberData) {\n\t\t\t\t\tconsole.warn(`Not found member by id ${dimensionTable.getMemberId(member)}`)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (Object.keys(fixSpace).length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = Object.keys(fixSpace).map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = fixSpace[dimension].map(member => {\n\n\t\t\t\tlet searchedInTree = findDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {FactTable} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tconst newFactTable = new FactTable({facts, primaryKey: this.cellTable.primaryKey});\n\t\tconst cells = newFactTable.getFacts().map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.cellTable.primaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * */\n\tremoveFacts(facts) {\n\t\tconst cellTable = this.getCells();\n\t\tconst primaryKey = this.cellTable.primaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[primaryKey] === fact[primaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable.cells;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * */\n\tremoveCells(cells) {\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\treturn findDimensionTreeByDimension.call(this, dimension).getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData) {\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tif (typeof dimension !== 'string') {\n\t\t\tthrow TypeError(`parameter dimension expects as string: ${dimension}`)\n\t\t}\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberId(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder(tracedDimensionTree => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTree.getTreeValue();\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberId(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberId(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.cellTable.primaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tcreateEmptyCells(cellOptions) {\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(combination => {\n\t\t\tconst unique = this.dice(combination).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tlet foreignKeysCellData = {};\n\t\t\t\tObject.keys(combination).forEach(dimension => {\n\t\t\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberId(combination[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {...foreignKeysCellData, ...cellOptions};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tCube.validateInstance(emptyCells);\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} customCellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(customCellOptions = {}) {\n\t\tconst cellOptions = {...this.cellTable.defaultFactOptions, ...customCellOptions};\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\tstatic validateInstance(emptyCells) {\n\t\temptyCells.forEach(emptyCell => {\n\t\t\tif (!(emptyCell instanceof EmptyCell)) {\n\t\t\t\tthrow new TypeError('some item in list of argument is not instances of EmptyCell')\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t *\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction findDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.cellTable.primaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nexport default Cube\n"],"names":["memory","InsufficientRollupData","dimension","id","message","NotFoundFactId","name","CreateInstanceException","DimensionException","originalConsole","console","customConsole","log","string","warn","warnOnce","Fact","data","key","hasOwnProperty","value","type","error","handleError","Cell","EmptyCell","options","generateId","cell","replace","c","r","Math","random","toString","Member","Object","assign","this","props","primaryKey","isPrototypeOf","Error","memberData","forEach","prop","InputMember","defaultData","propName","DimensionTable","foreignKey","genericId","keyProps","otherProps","members","defaultMemberOptions","keys","indexOf","concat","map","_this","splice","apply","length","member","push","memberOptions","linkProps","reduceId","create","addMember","index","reduce","acc","curValue","dimensionTable","Tree","getChildTrees","getParentTree","root","traceUpOrder","tracedTree","isRoot","callback","search","tracePostOrder","treeValue","tree","reqursively","parentNode","childTrees","getTreeValue","childTree","has","tracePreOrder","tracedTreeValue","DimensionTree","dimensionTree","level","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validate","dimensions","tracedDimensionTreeValue","getRoot","searchTreeByTreeValue","newDimensionTreeByMember","cloneDimensionTreeWithoutMembers","projectDrillDown","projectDrillUp","lastTracedMembers","lastTracedDimensionTree","tracedDimension","drillDownedMembers","_this2","drillDownDimensionMembers","getDimensionTreeByDimension","setMemberList","lastTracedMembers2","lastTracedDimensionTree2","b","drillUppedMembers","_this3","drillUpDimensionMembers","clone","dimensionTreeValue","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","tracedDimensionTree","childMembers","childDimension","_this4","removeMember","toBeAddedSpace","_this5","parentMembers","drillDownMembers","parentMember","isExternal","rollUpMembers","childMember","getMemberId","childIdAttributes","createMember","newDimensionTree","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","FactTable","facts","defaultFactOptions","factData","validateFactData","bind","fact","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","anotherBuildOne","processDimension","memberList","childDimensions","existMemberCount","args","entitiesParts","memberListForFilter","mapFilter","makeMemberListLevel","makeMemberList","deleteProps","cellTables","cellTableFiltered","filter","whatIsIt","totalMemberList","countId","entitiesPart","etalon","childIdAttribute","entityPart","startFrom","cache","restoredCache","find","surrogateKey","createKeyFromProps","obj","join","removedCells","dimensionHierarchies","cube","removedCell","travers","removeMembers","restoreCell","dimensionTrees","getFacts","memberCopy","deleteMemberId","dicedCube","dice","getCells","handlers","idValue","handler","Tuple","Space","newSpace","arguments","space","add","targetSpace","otherSpace","Array","prototype","CellTable","cellData","isEmptyCell","Cube","isArray","createDimensionHierarchy","set","fixSpace","findDimensionTreeByDimension","call","getDimensionMembers","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","union","filteredCellTable","cellBelongsToSpace","some","newDimensionHierarchies","originalDimensionHierarchy","finded","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","forSave","denormalize","getDimensionTrees","anotherBuild","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","TypeError","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","destroyDimensionTree","cellOptions","emptyCells","cartesian","combination","foreignKeysCellData","createEmptyCell","validateInstance","tuples","totalTuples","customCellOptions","tuple","createEmptyCells","addEmptyCells","addFacts","emptyCell","a","d","e","dimensionsOrder","tupleList","i","arr","item","rest","findDimensionTree","getDimensionTree"],"mappings":"wwFASQA,ECTKC,EACZ,WAAYC,EAAWC,kBACjBC,iEAA4DF,uBAAsBC,iBAI5EE,EACZ,WAAYC,kBACNF,qEAAgEE,IAgB1DC,EACZ,4BACMH,QAAU,oCAIJI,EACZ,WAAYN,kBACNE,gCAA2BF,qCDhC5BO,EAAkBC,QAClBC,EAAgB,CACrBC,IAAK,SAAAC,GACJJ,EAAgBG,qBAAcC,KAE/BC,KAAM,SAAAD,GACLJ,EAAgBK,sBAAeD,KAEhCE,UACOf,EAAS,GACR,SAAAa,GACDb,EAAOa,KACXb,EAAOa,IAAU,EACjBJ,EAAgBK,sBAAeD,QELdG,EAIpB,WAAYC,qBAEL,IAAIC,KAAOD,EAAM,KAChBA,EAAKE,eAAeD,UAZXE,EAgBDH,EAAKC,QAfjBG,EACY,YADZA,IAAcD,KACmB,aAATC,GAAgC,cAATA,GAAkC,OAAVD,OAelEF,GAAOD,EAAKC,GAEjBR,EAAQI,qCAA8BI,yCAAkCD,EAAKC,MAG9E,MAAOI,IDWgB,SAAAA,SAC1BA,EAAMlB,yBAAoBkB,EAAMlB,SAC1BkB,ECZJC,CAAYD,GAvBE,IAACF,EACbC,GCSgBG,0FAAaR,YCCbS,yBACRR,EAAMS,oBACZT,EAAKd,KACTc,EAAKd,GAAKsB,EAAUE,oCAEfV,EAAMS,eALyBF,mDAUfE,UACf,IAAID,EAAUC,uCAMHE,SACQ,iBAAZA,EAAKzB,8CA7Bb,uCAAuC0B,QAAQ,QAAS,SAASC,OACnEC,EAAoB,GAAhBC,KAAKC,SAAgB,SAChB,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACzBG,SAAS,eCHCC,wBACRlB,aACXmB,OAAOC,OAAOC,KAAMrB,iDAEPd,EAAIoC,EAAOtB,EAAMuB,MACxBF,OAASH,IAAUA,EAAOM,cAAcH,YACvCI,MAAM,oDAEPC,EAAa,UACnBA,EAAWH,GAAcrC,EAEzBoC,EAAMK,QAAQ,SAAAC,GAETA,IAASL,IACZG,EAAWE,GAAQ5B,EAAK4B,MAGnB,IAAIP,KAAKK,YCdGG,0FAAoBX,0CAC1BhC,EAAIwC,EAAY1B,EAAMuB,OAE7BO,EAAc,UAEpBJ,EAAWC,QAAQ,SAAAI,GAClBD,EAAYC,GAAY/B,EAAKE,eAAe6B,GAAY/B,EAAK+B,GAJzC,uCAOD7C,EAAIwC,EAAYI,EAAaP,YCP9BS,sCACN/C,IAAAA,cAAWgD,WAAAA,aAAaD,EAAeE,UAAUjD,SAAYsC,WAAAA,aCPtC,ODO2EY,IAAAA,aAAUC,WAAAA,aAAa,SAAIC,QAAAA,aAAU,SAAIC,qBAAAA,aAAuB,mBAC1KrD,IAAckD,QACZV,MAAM,oFAEkD,IAA3DN,OAAOoB,KAAKD,GAAsBE,QAAQjB,SACvCE,MAAM,uGAGRxC,UAAYA,OAEZgD,WAAaA,OAEbV,WAAaA,OAEbY,SAAW,GAAGM,OAAON,QAErBC,WAAa,GAAGK,OAAOL,QAEvBC,QAAUA,EAAQK,IAAI,SAAAhB,UACnB,IAAIR,EAAOQ,EAAYiB,EAAKpB,mBAG/Be,0BAA2BA,mDAKnBD,MACVO,OAAOC,MAAMxB,KAAKgB,QAAS,CAAC,EAAGhB,KAAKgB,QAAQS,QAAQL,OAAOJ,mDAMzDA,QAAU,uCAEJU,UACJA,EAAO1B,KAAKE,8CAKVwB,IAC6B,IAAlC1B,KAAKgB,QAAQG,QAAQO,QACnBV,QAAQW,KAAKD,GAElBtD,QAAQE,IAAI,kDAQDsD,yDAAgB,GAAIC,yCAE1BxB,OAAiBL,KAAKiB,qBAAyBW,GAC7Cd,EAA8Cd,KAA9Cc,SAAUC,EAAoCf,KAApCe,WAAYC,EAAwBhB,KAAxBgB,QAASd,EAAeF,KAAfE,WACjCgB,EAAOJ,EAASM,OAAOS,GAAWT,OAAOL,GACzClD,EAAK8C,EAAemB,SAASd,EAASd,GACtCwB,EAASlB,EAAYuB,OAAOlE,EAAIqD,EAAMb,EAAYH,eACnD8B,UAAUN,GACRA,sCAsBIA,EAAQ7D,GACnB6D,EAAO1B,KAAKE,YAAcrC,yCAEZ6D,UACPA,EAAO1B,KAAKE,iDAKPwB,OACNO,EAAQjC,KAAKgB,QAAQG,QAAQO,OACpB,IAAXO,QACG,IAAI7B,MAAM,mCAAoCsB,QAEhDV,QAAQO,OAAOU,EAAO,sCA9BZjB,EAASd,UACpBc,EAAQS,OACJT,EAAQkB,OAAO,SAACC,EAAKC,UACpBD,EAAIjC,GAAckC,EAASlC,GAAciC,EAAMC,GACpD,GAAGlC,GAAc,EAEb,oCAOQtC,SC1F0B,QD2FN2B,QAAQ,KAAM3B,gDAkBvByE,UACpB,IAAI1B,EAAe0B,YEzGPC,0FAOb,+DAQA,+DAQA,8DAOEtC,KAAKuC,gBAAgBd,+CAOG,OAAzBzB,KAAKwC,sDAQRC,EAAOzC,iBACN0C,aAAa,SAAAC,GACbA,EAAWC,WACdH,EAAOE,KAGFF,gDAOcI,OACjBC,OAAS,cACRC,eAAe,SAACC,EAAWC,GAC3BJ,EAASI,KACZH,EAASG,KAGJH,uCAOKD,aACFK,EAAYD,OACfE,EAAaF,EAAKT,gBACxBK,EAASI,GACU,OAAfE,GACHD,EAAYC,IAEZnD,6CAOY6C,aACJK,EAAYD,OACfG,EAAaH,EAAKV,gBAClBS,EAAYC,EAAKI,eACnBD,EAAW3B,QACd2B,EAAW9C,QAAQ,SAAAgD,GAClBJ,EAAYI,KAGdT,EAASG,EAAWC,IACnBjD,4CAMW6C,aACHK,EAAYD,OACfG,EAAaH,EAAKV,gBAClBS,EAAYC,EAAKI,eACvBR,EAASG,EAAWC,GAChBG,EAAW3B,QACd2B,EAAW9C,QAAQ,SAAAgD,GAClBJ,EAAYI,MAGbtD,uCAOMiD,OACJM,GAAM,cACLC,cAAc,SAACC,EAAiBd,GAChCA,IAAeM,IAClBM,GAAM,KAGDA,oCAOEN,OACLM,GAAM,cACLb,aAAa,SAACC,GACdA,IAAeM,IAClBM,GAAM,KAGDA,WC1IYG,yBACRC,iDAGJtB,EAAiDsB,EAAjDtB,iBAAiDsB,EAAjCC,MAAAA,aAAQ,OAAyBD,EAArBR,WAAAA,aAAa,cAEhDrD,OAAO+D,yBAAuB,CAC7BxB,eAAgB,CAKfvD,MAAO6B,EAAemD,qBAAqBzB,GAC3C0B,UAAU,EACVC,YAAY,GAEbb,WAAY,CAKXrE,MAAOqE,EACPa,YAAY,EACZD,UAAU,GAEXH,MAAO,CAKN9E,MAAO8E,EAAMvC,IAAI,SAAA4C,UACT,IAAIP,OAAmBO,GAAmBd,wBAElDa,YAAY,EACZD,UAAU,OAGPG,wBArCoC5B,6CAwCnC6B,EAAa,QACdpB,eAAe,SAACqB,OACbxG,EAAawG,EAAbxG,cACgC,IAAnCuG,EAAWhD,QAAQvD,SAGhB,IAAIM,EAFViG,EAAWxC,KAAK/D,mDA0BXoC,KAAKqC,8DAOLrC,KAAKmD,0DAOLnD,KAAK4D,0DAOehG,UACpBoC,KAAKqE,UAAUC,sBAAsB,SAAAX,UAChBA,EAAcN,eACfzF,YAAcA,uDAQf8D,OAEpB6C,EAA2BvE,KAAKwE,+CAEjCC,iBAAiBF,EAA0B7C,QAC3CgD,eAAeH,EAA0B7C,GAEvC6C,2CAGSZ,EAAejC,OAC3BiD,EACAC,cAEClC,aAAa,SAAAC,OACEkC,EAAoBlC,EAAWU,eAA1CzF,UAGFkH,EAAqBnC,GAAcoC,EACtC,CAACrD,GACDkD,EAAwBI,0BAA0BL,GAGrDhB,EACEsB,4BAA4BJ,GAC5BxB,eACA6B,cAAcJ,GAGhBH,EAAoBG,EACpBF,EAA0BjC,2CAIbgB,EAAejC,OACzByD,EACAC,cACC5B,cAAc,SAAC6B,EAAG1C,OACHkC,EAAoBlC,EAAWU,eAA1CzF,UACF0H,EAAoB3C,GAAc4C,EACrC,CAAC7D,GACD0D,EAAyBI,wBAAwBL,GAEpDxB,EACEsB,4BAA4BJ,GAC5BxB,eACA6B,cAAcI,GAEhBH,EAAqBG,EACrBF,EAA2BzC,mEAKtB8C,EAAQ,IAAI/B,EAAc1D,KAAKqE,kBACrCoB,EAAM1C,eAAe,SAAC2C,EAAoB/B,GAClBA,EAAcN,eACtBsC,oBAETF,qDAMmB/D,OAEpBkE,EAA0B5F,KAAKwE,wCAChCC,iBAAiBmB,EAAyBlE,QAG1CmE,sBAAsBD,OAErBE,EAAuB,KAKzBF,EAAwBvB,UAAUhB,eAF1B0C,IAAXnI,UACSoI,IAAThF,eAGD8E,EAAqBC,GAAuBC,EAErCF,gDAMcnC,cAEfsC,EAAmB,GAEzBtC,EAAcZ,eAAe,SAAA2C,OACrB9H,EAAsB8H,EAAtB9H,UAAWoD,EAAW0E,EAAX1E,QAClBiF,EAAiBrI,GAAaoD,IAML,IAHPhB,KAAKqD,eAAerC,QAGxBS,aACT+B,cAAc,SAACnB,EAAgB6D,OACnBC,EAA2C9D,EAApDrB,QAAkCoF,EAAkB/D,EAA7BzE,UAC9BqI,EAAiBG,GAAkBD,IAKrCrG,OAAOoB,KAAK+E,GAAkB3F,QAAQ,SAAA1C,OAE/ByE,EADuBgE,EAAKpB,4BAA4BrH,GAClByF,eAC5C4C,EAAiBrI,GAAW0C,QAAQ,SAAAoB,GACnCW,EAAeiE,aAAa5E,kDAIZiC,cACZ4C,EAAiB,GACvB5C,EAAcZ,eAAe,SAAA2C,OACrB9H,EAAsB8H,EAAtB9H,UAAWoD,EAAW0E,EAAX1E,QAClBuF,EAAe3I,GAAaoD,IAEVhB,KAAKqD,eAAerC,QAQvClB,OAAOoB,KAAKqF,GAAgBjG,QAAQ,SAAA1C,OAE7ByE,EADuBmE,EAAKvB,4BAA4BrH,GAClByF,eAC5CkD,EAAe3I,GAAW0C,QAAQ,SAAAoB,GACjCW,EAAeL,UAAUN,+DASFV,yDAAUhB,KAAKqD,eAAerC,WACnDhB,KAAK4C,gBACD5B,QAEWhB,KAAKwC,gBACkCa,eAAzCoD,IAATzF,QAAwBd,IAAAA,WAExBU,EADeZ,KAAKqD,eACpBzC,WACF8F,EAAmB,UACzB1F,EAAQV,QAAQ,SAAAoB,GACf+E,EAAcnG,QAAQ,SAAAqG,GACjBA,EAAa/F,KAAgBc,EAAOxB,KACS,IAA5CwG,EAAiBvF,QAAQwF,IAC5BD,EAAiB/E,KAAKgF,OAKnBD,wDAQgB1F,yDAAUhB,KAAKqD,eAAerC,WACjDhB,KAAK4G,oBACD5F,MAGFqB,EADYrC,KAAKuC,gBAAgB,GACNc,eAChB8C,EAA6B9D,EAAtCrB,QAAuBJ,EAAeyB,EAAfzB,WACzBiG,EAAgB,UACtB7F,EAAQV,QAAQ,SAAAoB,GACfyE,EAAa7F,QAAQ,SAAAwG,GAChBpF,EAAOd,KAAgByB,EAAe0E,YAAYD,KACT,IAAxCD,EAAc1F,QAAQ2F,IACzBD,EAAclF,KAAKmF,OAKhBD,6CAMKjF,yDAAgB,GACtBS,EAAiBrC,KAAKqD,eACtB2D,EAAoBhH,KAAKuC,gBAAgBlB,IAAI,SAAAsC,UAClDA,EAAcN,eAAezC,aAExBiB,EAAY,UAClBmF,EAAkB1G,QAAQ,SAAAM,GACzBiB,EAAUF,KAAKf,KAETyB,EAAe4E,aAAarF,EAAeC,iDA7PxBoC,UACnB,IAAIP,EAAcO,oDAEMN,OACzBuD,EAAmBvD,EAAca,0CACvCb,EAAcZ,eAAe,SAACU,OACVoB,EAA6BpB,EAAxC7F,UAA4BoD,EAAYyC,EAAZzC,QAEpCkG,EACEjC,4BAA4BJ,GAC5BxB,eACA6B,cAAclE,KAEVkG,WChEYC,+BACNxD,IAAAA,cAAeyD,IAAAA,gBAAiBC,IAAAA,wBACxCA,QACEjH,MAAM,8CAERuD,cAAgBA,aAAyBD,EAC3CC,EACAD,EAAc4D,oBAAoB3D,QAChCyD,gBAAkBA,GAAmBpH,KAAK2D,cAAcN,eAAezF,eACvEyJ,UAAYA,8DAGVrH,KAAK2D,mDAEA/F,WACHoC,KAAK2D,cAAcsB,4BAA4BrH,uDAGjDoC,KAAKoH,2DAEMA,QACbA,gBAAkBA,gDAGhBpH,KAAKqH,6DAEmBE,UACxB,IAAIJ,EAAmBI,YC1BXC,uFAC4C,OAAlDC,MAAAA,aAAQ,SAAIvH,WAAAA,aJPS,OIOiCwH,yDAAqB,kBACnFxH,WAAaA,OACbuH,MAAQA,EAAMpG,IAAI,SAAAsG,UAAY,IAAIjJ,EAAKiJ,UACvCD,mBAAqBA,OACrBD,MAAMnH,QAAQN,KAAK4H,iBAAiBC,KAAK7H,2DAGvCA,KAAKyH,+CAEIE,OACXA,EAAS9I,eAAemB,KAAKE,kBAC3B,IAAInC,EAAeiC,KAAKE,kDAGb4H,EAAM7H,EAAOC,GAC/BD,EAAMK,QAAQ,SAAAC,GACTA,IAASL,UACL4H,EAAKvH,cCdKwH,wFACAC,EAAWC,EAAOC,EAAiBC,EAAWC,GAGjEF,EAAgB5H,QAAQ,SAAAqD,GACvBoE,EAAiBM,gBAAgB1E,EAAesE,EAAOE,EAAWH,EAAWI,6CAIxDzE,EAAesE,EAAOE,EAAWH,EAAWI,GAElEzE,EAAcZ,eAAe,SAACV,EAAgBsB,GAC7CoE,EAAiBO,iBAAiB3E,EAAesE,EAAOE,EAAWH,EAAWI,8CAIxDzE,EAAesE,EAAOE,EAAWH,EAAWI,OAM/DpH,EALEqB,EAAiBsB,EAAcN,eAC7BzF,EAA2FyE,EAA3FzE,YAA2FyE,EAAhFvB,SAAAA,aAAW,OAAqEuB,EAAjEtB,WAAAA,aAAa,KAAawH,EAAuClG,EAAhDrB,QAAqBJ,EAA2ByB,EAA3BzB,WAAYV,EAAemC,EAAfnC,WAC9E8G,EAAoBrD,EAAcpB,gBAAgBlB,IAAI,SAAAsC,UAAiBA,EAAcN,eAAezC,aACpG4H,EAAkB7E,EAAcpB,gBAAgBlB,IAAI,SAAAsC,UAAiBA,EAAcN,eAAezF,YAIlG6K,EAAmBF,EAAW9G,OAC9BiH,EAAO,CAACN,EAAgBlI,EAAYU,EAAY6H,EAAkBT,EAAWC,EAAOrK,EAAWkD,EAAUC,EAAYkH,EAAOE,MAE7HnB,EAAkBvF,OAEhB,KACFkH,EACEtG,EAAiBsB,EAAcsB,4BAA4BuD,EAAgB,IAAInF,eAC/EuF,EAAsBvG,EAAerB,QAC3C2H,EAAgBZ,EAAiBc,UAAU7B,EAAkB,GAAIiB,EAAOW,EAAqBvG,GAC7FrB,EAAU+G,EAAiBe,oBAAoBtH,MAAM,KAAMkH,EAAKtH,OAAO,CAAC4F,EAAmB2B,UAN3F3H,EAAU+G,EAAiBgB,eAAevH,MAAM,KAAMkH,GAUvDT,EAAM3H,QAAQ,SAAAhB,GACbkI,EAAUwB,YAAY1J,EAAMwB,EAAUsH,GACtCZ,EAAUwB,YAAY1J,EAAMyB,EAAYqH,KAGzCpH,EAAQV,QAAQ,SAAAoB,GACfW,EAAeL,UAAUN,uCAYVd,EAAYqH,EAAOM,EAAYlG,OACzC4G,EAAa,UAEnBV,EAAWjI,QAAQ,SAAAoB,OACZwH,EAAoBjB,EAAMkB,OAAO,SAAA7J,UAC/BA,EAAKsB,IAAeyB,EAAe0E,YAAYrF,KAEvDuH,EAAWtH,KAAKuH,KAEVD,8CAKmBb,EAAgBlI,EAAYU,EAAY6H,EAAkBT,EAAWoB,EAAUxL,EAAWkD,EAAUC,EAAYkH,EAAOE,EAAWnB,EAAmB2B,OAC3KU,EAAkB,GAElBC,EAAU,SACdX,EAAcrI,QAAQ,SAAAiJ,MACjBA,EAAa9H,OAAQ,KAClBT,EAAU+G,EAAiBgB,eAAeX,EAAgBlI,EAAYU,EAAY6H,EAAkBT,EAAWuB,EAAc3L,EAAWkD,EAAUC,EAAYkH,EAAOE,EAAWmB,GACtLA,GAAoBtI,EAAQS,WAEtB+H,EAASD,EAAa,GAE5BvC,EAAkB1G,QAAQ,SAAAmJ,GAEzBzI,EAAQV,QAAQ,SAAAoB,GACfA,EAAO+H,GAAoBD,EAAOC,GAClC/H,EAAOxB,GAAeuI,EAAmBY,EAAgB5H,OAAS,EAClE4H,EAAgB1H,KAAKD,KAGtB6H,EAAajJ,QAAQ,SAAAoJ,UACbA,EAAWD,UAOfJ,yCAiBPjB,EACAlI,EACAU,EACA6H,EACAT,EACAuB,EACA3L,OACAkD,yDAAW,GACXC,yDAAa,GACbkH,yCACAE,2CAEAwB,4DAAY,EAGNC,EAAQ,GACRC,EAAgB,GAChB7I,EAAU,UAGKmH,EAAUgB,OAAO,SAAA7J,UACL,IAAzB2I,EAAM9G,QAAQ7B,KAETgB,QAAQ,SAAAhB,OAEdwI,EAAOE,EAAU8B,KAAK,SAAAhC,UAAQA,EAAKM,KAAoB9I,EAAK8I,KAC5D2B,EAAehC,EAAiBiC,mBAAmBlJ,EAAUgH,GAE7DiC,KAAgBF,IACrBA,EAAcE,KAAkBJ,KAKlCJ,EAAajJ,QAAQ,SAAAoJ,OAGdK,EAAehC,EAAiBiC,mBAAmBlJ,EAAU4I,GAG7DK,KAAgBH,GAAYG,KAAgBF,IACjDD,EAAMG,KAAkBJ,OAInB9L,EAAK+L,EAAMG,GACjBL,EAAW9I,GAAc/C,IAG1BiC,OAAOoB,KAAK0I,GAAOtJ,QAAQ,SAAA1B,OACpBf,EAAK+L,EAAMhL,GACX8K,EAAaH,EAAaO,KAAK,SAAAJ,UAAcA,EAAW9I,KAAgB/C,IACxE6D,EAAS7B,EAAOkC,OAAOlE,EAAI,GAAGuD,OAAON,GAAUM,OAAOL,GAAa2I,EAAYxJ,GACrFc,EAAQW,KAAKD,KAGPV,6CAGkBf,EAAOgK,UAGzBhK,EAAMoB,IAAI,SAAAd,UACT0J,EAAI1J,KACT2J,KAJa,qCAOF/B,EAAWgC,EAAcC,EAAsBC,cAE7DF,EAAa7J,QAAQ,SAAAgK,OACdrI,EAAQkG,EAAUhH,QAAQmJ,IACjB,IAAXrI,GACHkG,EAAU5G,OAAOU,EAAO,KAI1BkI,EAAa7J,QAAQ,SAAAwH,GACpBsC,EAAqB9J,QAAQ,SAAAqD,GAC5BoE,EAAiBwC,QAAQ,CAACzC,GAAOnE,EAAe,CAACoE,EAAiByC,cAAc3C,KAAKvG,EAAM+I,EAAM1G,GAAgBoE,EAAiB0C,sDAQlHtC,EAAWuC,OAEvBjD,GADY,IAAID,GACEmD,kBACxBxC,EAAU7H,QAAQ,SAAAhB,GACjBmI,EAAM9F,UAASrC,MAEhBmI,EAAMnH,QAAQ,SAAAwH,GACb4C,EAAepK,QAAQ,SAAAqD,GACtBoE,EAAiBwC,QAAQ,CAACzC,GAAOnE,EAAe,CAACoE,EAAiB0C,kBAI7DhD,sCAEW/F,EAAQ6G,EAAY3K,EAAW0B,EAAMsB,EAAYyB,OAC7DuI,EAAa,IAAI/K,EAAO6B,GAC9BW,EAAewI,eAAeD,UACvBtL,EAAKsB,GACZd,OAAOC,OAAOT,EAAMsL,yCAEAP,EAAM1G,EAAejC,EAAQ6G,EAAY3K,EAAW0B,EAAMsB,OACxEkK,EAAYT,EAAKU,UAAQnN,EAAY8D,IACrCW,EAAiBsB,EAAcsB,4BAA4BrH,GAAWyF,eAGvEyH,EAAUE,WAAWvJ,QACzBY,EAAeiE,aAAa5E,mCAIfyG,EAAWxE,OAAesH,yDAAW,aAYnD9C,EAAU7H,QAAQ,SAAAhB,GACjBqE,EAAcH,cAAc,SAAC1E,EAAOoH,GAZT,IAAgB5G,EACrC+C,EACEzE,EAAoB2K,EAAY3H,EAClCsK,EACAxJ,EAJqCpC,EAaDA,EAZpC+C,EAYe6D,EAZgB7C,eAC7BzF,EAA+CyE,EAA/CzE,UAAoB2K,EAA2BlG,EAApCrB,QAAqBJ,EAAeyB,EAAfzB,WAClCsK,EAAU5L,EAAKsB,GACfc,EAAS6G,EAAWuB,KAAK,SAAApI,UACvBW,EAAe0E,YAAYrF,KAAYwJ,IAE/CD,EAAS3K,QAAQ,SAAA6K,GAChBA,EAAQzJ,EAAQ6G,EAAY3K,EAAW0B,EAAMsB,EAAYyB,sDAchC8F,EAAWgC,EAAcxG,EAAe0G,GACnEtC,EAAiBwC,QAAQpC,EAAWxE,EAAe,CAACoE,EAAiByC,cAAc3C,KAAK7H,KAAMqK,EAAM1G,GAAgBoE,EAAiB0C,uBCpQlHW,EACpB,WAAYhM,aACXU,OAAOC,OAAOC,KAAMZ,ICPDiM,uFAKbC,EAAW,qCACDC,WACZjL,QAAQ,SAAAkL,GACXH,EAAMI,IAAIH,EAAUE,KAEdF,8BAKGI,EAAaC,GACvB7L,OAAOoB,KAAKyK,GAAYrL,QAAQ,SAAA1B,GAC1B8M,EAAY9M,KAChB8M,EAAY9M,GAAO,IAEpBgN,MAAMC,UAAUlK,KAAKH,MAAMkK,EAAY9M,GAAM+M,EAAW/M,eCHrDkN,EACL,kBAAc7D,IAAAA,MAAO/H,IAAAA,eAAYwH,mBAAAA,aAAqB,oBAChDO,MAAQA,EAAM5G,IAAI,SAAA0K,UAClBA,aAAoB7M,EAChB6M,EAEA5M,EAAU6M,YAAYD,GAAY,IAAI5M,EAAU4M,GAAY,IAAI7M,EAAK6M,UAGzE7L,WAAaA,OACbwH,mBAAqBA,GAYtBuE,wBACO5B,mBACyCA,EAA9CD,qBAAAA,aAAuB,OAAuBC,EAAnBlC,UAAAA,aAAY,KACzCyD,MAAMM,QAAQ/D,KACjBA,EAAY,CAAEF,MAAOE,GACrB/J,EAAQK,SAAS,qGAEiE0J,MAA3EF,MAAAA,aAAQ,SAAI/H,WAAAA,aR7Cc,WQ6CqBwH,mBAAAA,aAAqB,UAEvE0C,qBAAuBA,EAAqB/I,IAAI,SAAAkG,UAEhDA,EAAmBF,UAClBE,aAA8BJ,EAC1BI,EAEAJ,EAAmBgF,yBAAyB5E,GAE1CA,EAAmBlF,eACxBkF,aAA8B7D,EAC3B6D,EAEA7D,EAAc4D,oBAAoBC,GAGtCA,aAA8B5G,EAC1B4G,EAEA5G,EAAemD,qBAAqByD,UAIzCY,UAAY,IAAI2D,EAAU,CAAE7D,MAAAA,EAAO/H,WAAAA,EAAYwH,wBAAwBA,6CA0CvE9J,EAAW8D,UACT1B,KAAK+K,UAAQnN,EAAY8D,iCAO5B0K,cAEEC,EAAW,GACjBvM,OAAOoB,KAAKkL,GAAK9L,QAAQ,SAAA1C,GAExByO,EAASzO,GAAagO,MAAMM,QAAQE,EAAIxO,IACrCwO,EAAIxO,GACJ,CAACwO,EAAIxO,QAEF+F,EAAgB2I,EAA6BC,KAAKjL,EAAM1D,MAGzD+F,OAICtB,EAAiBsB,EAAcN,eACrCgJ,EAASzO,GAAW0C,QAAQ,SAACD,EAAY4B,OAEpCP,EADYJ,EAAKkL,oBAAoB5O,GACpBkM,KAAK,SAAApI,UAAUW,EAAe0E,YAAYrF,KAAYW,EAAe0E,YAAY1G,KACtGgM,EAASzO,GAAWqE,GAASP,EACxBrB,GACJjC,EAAQI,sCAA+B6D,EAAe0E,YAAYrF,YATnEtD,EAAQI,sCAA+BZ,UAcnC6O,EAA6BzM,KAAKoK,qBAAqB3I,UACzD3B,OAAOoB,KAAKmL,GAAU5K,OAASgL,QAC5BrM,mDAA4CqM,sBAG7CC,EAAiC,GAGjCC,EAAc7M,OAAOoB,KAAKmL,GAAUhL,IAAI,SAAAzD,OAEzCgP,EAEEC,EAAiBR,EAASzO,GAAWyD,IAAI,SAAAK,OAE1CoL,EAAiBR,EAA6BC,KAAKjL,EAAM1D,GAEvDmP,EAAUD,EAAetI,mCAE/BsI,EAAerI,iBAAiBsI,EAASrL,GACzCoL,EAAepI,eAAeqI,EAASrL,GAEnCkL,EACHA,EAAwBI,mBAAmBD,GAE3CH,EAA0BG,QAKvBH,EAAwBvI,UAAUhB,6BAFrCzF,YACAoD,kBAME4L,GACHF,EAA+B/K,KAAKiL,GAIlBvB,EAAM4B,YAAN5B,IAAewB,MAM/BK,EAAoBlN,KAAKgL,WAEvBmC,EAAqB,SAAC7N,EAAMkM,UACM1L,OAAOoB,KAAKsK,GAAO4B,KAAK,SAAAxP,OACxDoD,EAAUwK,EAAM5N,KACa0O,EAA6BC,KAAKjL,EAAM1D,GAAWyF,eAA9EzC,IAAAA,WAAYV,IAAAA,kBACLc,EAAQ8I,KAAK,SAAApI,UACpBA,EAAOxB,KAAgBZ,EAAKsB,QAOtC+L,EAAYrM,QAAQ,SAAAkL,GAEnB0B,EAAoBA,EAAkB/D,OAAO,SAAA7J,UACrC6N,EAAmB7N,EAAMkM,WAK5B6B,EAA0B,eAC3BjD,qBAAqB9J,QAAQ,SAAAgN,OAC7BC,GAAS,KACbb,EAA+BpM,QAAQ,SAAAkN,GAClCF,EAA2BjK,eAAezF,YAAc4P,EAA6BnK,eAAezF,YACvGyP,EAAwB1L,KAAK6L,GAC7BD,GAAS,MAGNA,EAAQ,OACmBD,EAA2BjK,eAAlDrC,IAAAA,QAASpD,IAAAA,UACX4P,EAA+B9J,EAAc+J,yBAAyBH,GAC5EtM,EAAQV,QAAQ,SAAAoB,OACXgM,GAAsB,GAC1BR,EAAkB5M,QAAQ,SAAAqN,GACrBR,EAAmBQ,OAAiB/P,EAAY,CAAC8D,OACpDgM,GAAsB,KAGnBA,KAC+E,IAAzEF,EAA6BnK,eAAerC,QAAQG,QAAQO,IAErE8L,EAA6BI,2BAA2BlM,KAK3D2L,EAAwB1L,KAAK6L,MAIxB,IAAIK,EAAQ,CAClB1F,UAAW+E,EACX9C,qBAAsBiD,EACtBS,aAAc9N,KAAK8N,cAAgB9N,KACnC+N,aAAc/N,uCAWRqH,EAAW2G,OACZC,EAAmBC,EAAa3B,KAAKvM,KAAMqH,UAC7C4G,GAAoBA,EAAiBE,aAAaH,IACrDC,EAAiBG,mBAAmBJ,GAE9BhO,uCAUEqH,EAAW2G,OACdC,EAAmBC,EAAa3B,KAAKvM,KAAMqH,UAC7C4G,GAAoBA,EAAiBE,aAAaH,IACrDC,EAAiBG,mBAAmBJ,GAE9BhO,+CAwVT,sBAAqBiI,yDAAQjI,KAAKgL,WAAYqD,6DACvC1P,EAAOoJ,EAAiBuG,YAAYrG,EAAOsG,EAAkBhC,KAAKvM,OACpEqO,GACH1P,EAAK2B,QAAQ,SAAC3B,EAAMsD,GACfgG,EAAMhG,aAAkB9C,UACpBR,EAAK6H,EAAK2B,UAAUjI,qBAIvBvB,GA1Va4N,KAAKvM,KAAMA,KAAKgL,6CAO3BvD,OAEFQ,EADe,IAAIT,EAAU,CAACC,MAAAA,EAAOvH,WAAYF,KAAKmI,UAAUjI,aAC3CyK,WAAWtJ,IAAI,SAAAyG,UAAQ,IAAI5I,EAAK4I,QACxDnG,KAAKH,MAAMxB,KAAKgL,WAAY/C,OACzBD,EAAYhI,KAAK2K,kBACvB5C,EAAiByG,aAAaxG,EAAWC,EAAOsG,EAAkBhC,KAAKvM,MAAOA,KAAKgL,WAAYhL,KAAKmI,UAAUjI,YACvGF,yCAMIyH,OACLU,EAAYnI,KAAKgL,WACjB9K,EAAaF,KAAKmI,UAAUjI,WAC5BiK,EAAe1C,EAAMpG,IAAI,SAAAyG,UACvBK,EAAU2B,KAAK,SAAAxK,UAAQA,EAAKY,KAAgB4H,EAAK5H,YAEpDuO,YAAYtE,6CAOVnK,KAAKmI,UAAUF,0CAMXA,GACXF,EAAiB2G,QAAQ1O,KAAKgL,WAAY/C,EAAOjI,KAAKoK,qBAAsBpK,kDAOzDpC,UACZ0O,EAA6BC,KAAKvM,KAAMpC,GAAWyF,eAAerC,mDAWvDpD,cAAW+Q,yDAAsB,GAAIC,yDAAwB,GAAIC,yDAA8B,GAAI9C,4CAE5F,iBAAdnO,QACJkR,2DAAoDlR,IAG3DkC,OAAOoB,KAAK0N,GAAuBtO,QAAQ,SAAA1C,OACpCyC,EAAauO,EAAsBhR,GACnC2K,EAAaxD,EAAKyH,oBAAoB5O,GACtCyE,EAAiBiK,EAA6BC,KAAKxH,EAAMnH,GAAWyF,eAEpExF,EAAKwC,EADYgC,EAAfnC,gBAEKqI,EAAWuB,KAAK,SAAApI,UACrB7D,IAAOwE,EAAe0E,YAAYrF,WAGnC,IAAI/D,EAAuBC,EAAWC,SAKxC8F,EAAgB2I,EAA6BC,KAAKvM,KAAMpC,GACxDmR,EAAsBpL,EAAcpB,gBACpCF,EAAiBsB,EAAcN,eAC7BzC,EAAeyB,EAAfzB,WACFoO,EAAwB,GAC9BD,EAAoBzO,QAAQ,SAAA2O,OACrB5M,EAAiB4M,EAAmB5L,eAClCzF,EAAsCyE,EAAtCzE,UAAWgD,EAA2ByB,EAA3BzB,WAAYV,EAAemC,EAAfnC,WACzBwB,EAASkN,EAAsBhR,OAChC8D,QACE,IAAI/D,EAAuBC,GAEjCoR,EAAsBpO,GAAcc,EAAOxB,SAIvC0B,EAAgB9B,OAAOC,OAAO,GAAI4O,EAAqBK,GAEzDE,EAAavL,EAAcsD,aAAarF,GACxCuN,EAAkBvO,EACtB+C,EAAcjB,aAAa,SAAAwD,MACtBvC,IAAkBuC,EAAqB,OAC4BA,EAAoB7C,eAAvE+L,IAAXxR,UAAwCyR,IAAZzO,WAC9B0O,OAA+BH,EAAkB9M,EAAe0E,YAAYmI,IAClFpP,OAAOC,OAAOuP,EAA0BT,EAA4BO,IACpEF,EAAahJ,EAAoBe,aAAaqI,GAC9CH,EAAkBE,UAGfE,eAAexD,iDAOCnO,EAAW8D,OAC1BiC,EAAgB2I,EAA6BC,KAAKvM,KAAMpC,GACxD4R,EAAiB7L,EAAciK,2BAA2BlM,GAC1DyG,EAAYnI,KAAKgL,WAgBvBlL,OAAOoB,KAAKsO,GAAgBnO,IAAI,SAAAzD,OAfLA,EAAWoD,EAC/BmJ,EACA9H,EACAzB,GAH+BI,EAgBgBwO,EAhB3B5R,EAgBgBA,GAfpCuM,EAAe,GACf9H,EAAiBsB,EAAcsB,4BAA4BrH,GAAWyF,eACtEzC,EAAayB,EAAezB,WAGlCuH,EAAU7H,QAAQ,SAAAhB,GACjB0B,EAAQV,QAAQ,SAAAoB,GACXpC,EAAKsB,IAAeyB,EAAe0E,YAAYrF,IAClDyI,EAAaxI,KAAKrC,OAId6K,GAIS7J,QAAQ,SAAAhB,OACjB2C,EAAQkG,EAAUhH,QAAQ7B,IACjB,IAAX2C,GACHkG,EAAU5G,OAAOU,EAAO,qDASNsF,OACf5D,EAAgBD,EAAc4D,oBAAoBC,QACnD6C,qBAAqBzI,KACzBgC,GAEDoE,EAAiBM,gBAAgB1E,EAAe3D,KAAKgL,WAAYhL,KAAKgL,WAAYhL,KAAKgL,WAAYhL,KAAKmI,UAAUjI,6DAM1FqH,GAExBQ,EAAiB0H,qBAAqBzP,KAAKgL,WAAYhL,KAAKgL,WAAYzD,EAAoBvH,WAEvFoK,qBAAqB7I,OAAOvB,KAAKoK,qBAAqBjJ,QAAQoG,GAAqB,4CAMxEmI,cACVC,EAAa,UACJ1D,EAAK2D,UAAU5P,MACvBM,QAAQ,SAAAuP,OACCtK,EAAKwF,KAAK8E,GAAa7E,WAC1BvJ,OAAQ,KACfqO,EAAsB,GAC1BhQ,OAAOoB,KAAK2O,GAAavP,QAAQ,SAAA1C,OAC1ByE,EAAiBiK,EAA6BC,KAAKhH,EAAM3H,GAAWyF,eAClEzC,EAAeyB,EAAfzB,WACRkP,EAAoBlP,GAAcyB,EAAe0E,YAAY8I,EAAYjS,UAEpEmO,OAAe+D,EAAwBJ,GAEvCpQ,EAAOH,EAAU4Q,gBAAgBhE,GACvC4D,EAAWhO,KAAKrC,MAGXqQ,iDAOA3P,KAAKgL,WAAW7B,OAAO,SAAA7J,UAAQH,EAAU6M,YAAY1M,yCAMjDA,UACJH,EAAU6M,YAAY1M,yCAMhBqQ,GACb1D,EAAK+D,iBAAiBL,MACnBhO,KAAKH,MAAMxB,KAAKgL,WAAY2E,gDAgJdtF,EACZ4F,EACAC,EA3ISC,yDAAoB,GAC5BT,OAAkB1P,KAAKmI,UAAUT,mBAAuByI,QAwI7C9F,EAvIFrK,KAwIViQ,EAAShE,EAAK2D,UAAUvF,GACxB6F,EAAc,GACpBD,EAAO3P,QAAQ,SAAA8P,GAES,EADL/F,EAAKU,KAAKqF,GAAOzF,WACrBlJ,QACbyO,EAAYvO,KAAKyO,KAGZF,GAhJezO,OAAQ,KACtBkO,EAAa3P,KAAKqQ,iBAAiBX,QACpCY,cAAcX,+CAkBb3P,gBAAgB6N,mCAzbV7F,OAAWoC,yDAAuB,GAC3CwB,MAAMM,QAAQlE,KACjBA,EAAY,CAAEP,MAAOO,GACrB5J,EAAQK,SAAS,qGAE0CuJ,MAApDP,MAAAA,aAAQ,KAAIvH,IAAAA,eAAYwH,mBAAAA,aAAqB,SAC/CuE,EAAK9L,cAAcH,OAASiM,IAASjM,WACpC,IAAI/B,MAGLoM,EAAO,IAAIrK,KAAK,CACrBmI,UAAW,CAAEjI,WAAAA,EAAYwH,mBAAAA,GACzB0C,qBAAsBA,WAIvBC,EAAKkG,SAAS9I,GAEP4C,2CA4ZgBsF,GACvBA,EAAWrP,QAAQ,SAAAkQ,QACZA,aAAqBrR,SACpB,IAAI2P,UAAU,mGAeNzE,OAOVuF,EAAY,SAAZA,EAAaa,EAAGpL,8BAAM7F,mCAAAA,2BACpB6F,EAAIuK,iBAPDa,EAOaA,EAPVpL,EAOaA,SAPJjE,iBAAUqP,EAAEpP,IAAI,SAAAqP,UAC/BrL,EAAEhE,IAAI,SAAAsP,SACL,GAAGvP,OAAOsP,EAAGC,kBAKYnR,IAAKiR,EAP7B,IAACA,EAAGpL,KAURuL,EAAkB,GAElBxE,EAAM/B,EAAKD,qBAAqB/I,IAAI,SAAAsC,UAAiBA,EAAcN,iBAAgBhC,IAAI,SAAAgB,UAC5FuO,EAAgBjP,KAAKU,EAAezE,WAC7ByE,EAAerB,UAGjB6P,EAAY,UAGdzE,EAAI3K,SACU,EAAb2K,EAAI3K,OACDmO,EAAUpO,MAAM,KAAM4K,GAEtBA,EAAI,GAAG/K,IAAI,SAAAyP,SAAK,CAACA,MAEpBxQ,QAAQ,SAAAyQ,OACLC,EAAO,UACbJ,EAAgBtQ,QAAQ,SAAC1C,EAAWqE,GACnC+O,EAAKpT,GAAamT,EAAI9O,KAEvB4O,EAAUlP,KAAK,IAAIyJ,EAAM4F,IAClBA,IAIFH,WAOHhD,kCACQC,IAAAA,aAAcC,IAAAA,aAAiBkD,iFACrCA,KAEDnD,aAAeA,IAEfC,aAAeA,eANA9B,QActB,SAASiC,EAAa7G,UACdrH,KAAKoK,qBAAqBN,KAAK,SAAAvC,UAC9BA,EAAmB2G,iBAAmB7G,IAO/C,SAASiF,EAA6B1O,OACjCsT,cACC9G,qBAAqB9J,QAAQ,SAAAqD,GACHA,EAAcsB,4BAA4BrH,KAEvEsT,EAAoBvN,EAAcsB,4BAA4BrH,MAGzDsT,EAMR,SAAS3C,WACDvO,KAAKoK,qBAAqB/I,IAAI,SAAAkG,UAC7BA,EAAmB4J,iBACvB5J,EAAmB4J,mBACnB5J"}