{"version":3,"file":"cube.js","sources":["../src/errors.js","../src/console.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/const.js","../src/InputMember.js","../src/DimensionTable.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/FactTable.js","../src/SnowflakeBuilder.js","../src/Tuple.js","../src/Space.js","../src/Cube.js"],"sourcesContent":["export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class CreateInstanceException {\n\tconstructor() {\n\t\tthis.message = 'this must have prototype of Cube'\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n\tstatic create(id, props, data, primaryKey) {\n\t\tif (!(this === Member || Member.isPrototypeOf(this))) {\n\t\t\tthrow Error('this.constructor must be prototype of Member')\n\t\t}\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn new this(memberData)\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {\n\tstatic create(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\treturn super.create(id, memberData, defaultData, primaryKey)\n\t}\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport InputMember from './InputMember.js'\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberId(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = InputMember.create(id, keys, memberData, primaryKey);\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * Search method\n\t * @return {Tree|undefined}\n\t * */\n\tsearchTreeByTreeValue(callback) {\n\t\tlet search = void 0;\n\t\tthis.tracePostOrder((treeValue, tree) => {\n\t\t\tif (callback(tree)) {\n\t\t\t\tsearch = tree\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst parentNode = tree.getParentTree();\n\t\t\tcallback(tree);\n\t\t\tif (parentNode !== null) {\n\t\t\t\treqursively(parentNode);\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcallback(treeValue, tree);\n\t\t}(this));\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\t(function reqursively(tree) {\n\t\t\tconst childTrees = tree.getChildTrees();\n\t\t\tconst treeValue = tree.getTreeValue();\n\t\t\tcallback(treeValue, tree);\n\t\t\tif (childTrees.length) {\n\t\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\t\treqursively(childTree);\n\t\t\t\t});\n\t\t\t}\n\t\t}(this));\n\t}\n\t/**\n\t * Check if some thee is present in childs of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasChild(tree) {\n\t\tlet has = false;\n\t\tthis.tracePreOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n\t/**\n\t * Check if some thee is present in parents of some level\n\t * @param {Tree}\n\t * @return {boolean}\n\t * */\n\thasParent(tree) {\n\t\tlet has = false;\n\t\tthis.traceUpOrder((tracedTree) => {\n\t\t\tif (tracedTree === tree) {\n\t\t\t\thas = true;\n\t\t\t}\n\t\t});\n\t\treturn has;\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validate();\n\t}\n\tvalidate(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder((tracedDimensionTreeValue) => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder((tracedTreeValue) => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\treturn this.getRoot().searchTreeByTreeValue(dimensionTree => {\n\t\t\tconst dimensionTreeValue = dimensionTree.getTreeValue();\n\t\t\treturn dimensionTreeValue.dimension === dimension;\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\t// насытить связными данными снизу\n\tprojectDrillDown(dimensionTree, member){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\t// 2 trace up\n\t\tthis.traceUpOrder(tracedTree => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\n\t\t\t// 3 get drill down of last members\n\t\t\tconst drillDownedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree.drillDownDimensionMembers(lastTracedMembers);\n\n\t\t\t// 4 set members\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillDownedMembers);\n\n\t\t\t// 5 save current dimension and drill downed members\n\t\t\tlastTracedMembers = drillDownedMembers;\n\t\t\tlastTracedDimensionTree = tracedTree;\n\t\t});\n\t}\n\t// насытить связными данными сверху\n\tprojectDrillUp(dimensionTree, member){\n\t\tlet lastTracedMembers2;\n\t\tlet lastTracedDimensionTree2;\n\t\tthis.tracePreOrder((b, tracedTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedTree.getTreeValue();\n\t\t\tconst drillUppedMembers = tracedTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree2.drillUpDimensionMembers(lastTracedMembers2);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillUppedMembers);\n\n\t\t\tlastTracedMembers2 = drillUppedMembers;\n\t\t\tlastTracedDimensionTree2 = tracedTree;\n\t\t})\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tdimensionTable.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// if (memberList.length === 1){\n\t\t// \tthis.tracePreOrder((dimensionTable, tracedDimensionTree) => {\n\t\t// \t\tconst {members: childMembers, dimension: childDimension} = dimensionTable;\n\t\t// \t\ttoBeAddedSpace[childDimension] = childMembers;\n\t\t// \t})\n\t\t// }\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst { members: parentMembers, primaryKey } = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst drillDownMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (parentMember[foreignKey] === member[primaryKey]) {\n\t\t\t\t\tif (drillDownMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillDownMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillDownMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTree = this.getChildTrees()[0]; // for one child always\n\t\tconst dimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers, foreignKey } = dimensionTable;\n\t\tconst rollUpMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (member[foreignKey] === dimensionTable.getMemberId(childMember)) {\n\t\t\t\t\tif (rollUpMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\trollUpMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn rollUpMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","import Fact from './Fact.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport {NotFoundFactId} from './errors.js'\n\n/**\n * @throw {NotFoundFactId}\n * */\nexport default class FactTable {\n\tconstructor({ facts = [], primaryKey = DEFAULT_FACT_ID_PROP } = {}, defaultFactOptions = {}) {\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.facts = facts.map(factData => new Fact(factData));\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.facts.forEach(this.validateFactData.bind(this))\n\t}\n\tgetFacts() {\n\t\treturn this.facts;\n\t}\n\tvalidateFactData(factData) {\n\t\tif (!factData.hasOwnProperty(this.primaryKey)) {\n\t\t\tthrow new NotFoundFactId(this.primaryKey)\n\t\t}\n\t}\n\tstatic deleteProps(fact, props, primaryKey) {\n\t\tprops.forEach(prop => {\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tdelete fact[prop];\n\t\t\t}\n\t\t});\n\t}\n}\n","import FactTable from './FactTable.js'\nimport Member from './Member.js'\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet members;\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tmembers = SnowflakeBuilder.makeMemberList.apply(null, args);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(childDimensions[0]).getTreeValue();\n\t\t\tconst memberListForFilter = dimensionTable.members;\n\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttributes[0], cells, memberListForFilter, dimensionTable);\n\t\t\tmembers = SnowflakeBuilder.makeMemberListLevel.apply(null, args.concat([childIdAttributes, entitiesParts]));\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tFactTable.deleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tFactTable.deleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\tmembers.forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberId(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\t/**\n\t * @private\n\t * */\n\tstatic makeMemberListLevel(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, whatIsIt, dimension, keyProps, otherProps, cells, cellTable, childIdAttributes, entitiesParts) {\n\t\tlet totalMemberList = [];\n\n\t\tlet countId = 0;\n\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\tif (entitiesPart.length) {\n\t\t\t\tconst members = SnowflakeBuilder.makeMemberList(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, entitiesPart, dimension, keyProps, otherProps, cells, cellTable, countId);\n\t\t\t\tcountId = countId + members.length;\n\n\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\tchildIdAttributes.forEach(childIdAttribute => {\n\n\t\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\tmember[primaryKey] = (existMemberCount + totalMemberList.length + 1);\n\t\t\t\t\t\ttotalMemberList.push(member)\n\t\t\t\t\t});\n\n\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totalMemberList;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic makeMemberList(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst cache = {};\n\t\tconst restoredCache = {};\n\t\tconst members = [];\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in cache) && !(surrogateKey in restoredCache)) {\n\t\t\t\tcache[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = cache[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\n\t\tObject.keys(cache).forEach(key => {\n\t\t\tconst id = cache[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst member = Member.create(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\t\t\tmembers.push(member);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst factTable = new FactTable();\n\t\tconst facts = factTable.getFacts();\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTree, cell) => {\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberId(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((value, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTree, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport FactTable from './FactTable.js'\nimport {\n\tInsufficientRollupData,\n\tCreateInstanceException\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\n\nclass CellTable {\n\tconstructor({ cells, primaryKey, defaultFactOptions = {} }) {\n\t\tthis.cells = cells.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\t\tthis.primaryKey = primaryKey;\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t}\n}\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * @param {{snowflake, dimensionHierarchies}|Cube} factTable - facts which will be subject to analysis\n * */\nclass Cube {\n\tconstructor(cube) {\n\t\tlet { dimensionHierarchies = [], cellTable = {} } = cube;\n\t\tif (Array.isArray(cellTable)) {\n\t\t\tcellTable = { cells: cellTable };\n\t\t\tconsole.warnOnce('first argument \\\"cells\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { cells = [], primaryKey = DEFAULT_FACT_ID_PROP, defaultFactOptions = {} } = cellTable;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.cellTable = new CellTable({ cells, primaryKey, defaultFactOptions: {...defaultFactOptions} });\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * @public\n\t * Fabric method for creating cube from facts and dimensionHierarchiesData data\n\t * @param {object} factTable\n\t * @param {object} dimensionHierarchies\n\t * @return {Cube}\n\t * */\n\tstatic create(factTable, dimensionHierarchies = []) {\n\t\tif (Array.isArray(factTable)) {\n\t\t\tfactTable = { facts: factTable };\n\t\t\tconsole.warnOnce('first argument \\\"facts\\\" as array type is deprecated now, use object for describe fact table')\n\t\t}\n\t\tconst { facts = [], primaryKey, defaultFactOptions = {} } = factTable;\n\t\tif (!(Cube.isPrototypeOf(this) || Cube === this)) {\n\t\t\tthrow new CreateInstanceException()\n\t\t}\n\n\t\tconst cube = new this({\n\t\t\tcellTable: { primaryKey, defaultFactOptions },\n\t\t\tdimensionHierarchies: dimensionHierarchies,\n\t\t});\n\n\t\t// build 2: members\n\t\tcube.addFacts(facts);\n\n\t\treturn cube;\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * */\n\tdice(set) {\n\t\t// 1 make one projection on to member\n\t\tconst fixSpace = {};\n\t\tObject.keys(set).forEach(dimension => {\n\t\t\t// work with arrays\n\t\t\tfixSpace[dimension] = Array.isArray(set[dimension])\n\t\t\t\t? set[dimension]\n\t\t\t\t: [set[dimension]];\n\n\t\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\t\t\n\t\t\t// discard non-existent dimensions\n\t\t\tif (!dimensionTree) {\n\t\t\t\tconsole.warn(`Not existed dimension: ${dimension}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tfixSpace[dimension].forEach((memberData, index) => {\n\t\t\t\tconst members = this.getDimensionMembers(dimension);\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberId(member) === dimensionTable.getMemberId(memberData));\n\t\t\t\tfixSpace[dimension][index] = member;\n\t\t\t\tif (!memberData) {\n\t\t\t\t\tconsole.warn(`Not found member by id ${dimensionTable.getMemberId(member)}`)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (Object.keys(fixSpace).length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = Object.keys(fixSpace).map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = fixSpace[dimension].map(member => {\n\n\t\t\t\tlet searchedInTree = findDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {FactTable} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tconst newFactTable = new FactTable({facts, primaryKey: this.cellTable.primaryKey});\n\t\tconst cells = newFactTable.getFacts().map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.cellTable.primaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * */\n\tremoveFacts(facts) {\n\t\tconst cellTable = this.getCells();\n\t\tconst primaryKey = this.cellTable.primaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[primaryKey] === fact[primaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable.cells;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * */\n\tremoveCells(cells) {\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\treturn findDimensionTreeByDimension.call(this, dimension).getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData) {\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tif (typeof dimension !== 'string') {\n\t\t\tthrow TypeError(`parameter dimension expects as string: ${dimension}`)\n\t\t}\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberId(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder(tracedDimensionTree => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTree.getTreeValue();\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberId(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tconst dimensionTree = findDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberId(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.cellTable.primaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tcreateEmptyCells(cellOptions) {\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(combination => {\n\t\t\tconst unique = this.dice(combination).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tlet foreignKeysCellData = {};\n\t\t\t\tObject.keys(combination).forEach(dimension => {\n\t\t\t\t\tconst dimensionTable = findDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberId(combination[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {...foreignKeysCellData, ...cellOptions};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tCube.validateInstance(emptyCells);\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} customCellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(customCellOptions = {}) {\n\t\tconst cellOptions = {...this.cellTable.defaultFactOptions, ...customCellOptions};\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\tstatic validateInstance(emptyCells) {\n\t\temptyCells.forEach(emptyCell => {\n\t\t\tif (!(emptyCell instanceof EmptyCell)) {\n\t\t\t\tthrow new TypeError('some item in list of argument is not instances of EmptyCell')\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t *\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction findDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.cellTable.primaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nexport default Cube\n"],"names":["InsufficientRollupData","dimension","id","message","NotFoundFactId","name","CreateInstanceException","DimensionException","handleError","error","originalConsole","console","customConsole","log","string","warn","warnOnce","memory","isSimple","value","type","Fact","data","key","hasOwnProperty","Cell","uuidv4","replace","c","r","Math","random","v","toString","EmptyCell","options","generateId","cell","Member","Object","assign","props","primaryKey","isPrototypeOf","Error","memberData","forEach","prop","DEFAULT_TEMPLATE_FOREIGN_KEY","DEFAULT_FACT_ID_PROP","DEFAULT_MEMBER_ID_PROP","InputMember","defaultValue","defaultData","propName","DimensionTable","foreignKey","genericId","keyProps","otherProps","members","defaultMemberOptions","keys","indexOf","concat","map","splice","apply","length","member","push","memberOptions","linkProps","reduceId","create","addMember","index","reduce","acc","curValue","dimensionTable","Tree","getChildTrees","getParentTree","root","traceUpOrder","tracedTree","isRoot","callback","search","tracePostOrder","treeValue","tree","reqursively","parentNode","childTrees","getTreeValue","childTree","has","tracePreOrder","tracedTreeValue","DimensionTree","dimensionTree","level","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validate","dimensions","tracedDimensionTreeValue","getRoot","searchTreeByTreeValue","dimensionTreeValue","newDimensionTreeByMember","cloneDimensionTreeWithoutMembers","projectDrillDown","projectDrillUp","lastTracedMembers","lastTracedDimensionTree","tracedDimension","drillDownedMembers","drillDownDimensionMembers","getDimensionTreeByDimension","setMemberList","lastTracedMembers2","lastTracedDimensionTree2","b","drillUppedMembers","drillUpDimensionMembers","clone","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","memberList","tracedDimensionTree","childMembers","childDimension","currentDimensionTree","removeMember","toBeAddedSpace","parentTree","parentMembers","drillDownMembers","parentMember","isExternal","rollUpMembers","childMember","getMemberId","childIdAttributes","createMember","newDimensionTree","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","FactTable","facts","defaultFactOptions","factData","validateFactData","bind","fact","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","anotherBuildOne","processDimension","childDimensions","existMemberCount","args","makeMemberList","entitiesParts","memberListForFilter","mapFilter","makeMemberListLevel","deleteProps","cellTables","cellTableFiltered","filter","whatIsIt","totalMemberList","countId","entitiesPart","etalon","childIdAttribute","entityPart","startFrom","cache","restoredCache","existedCells","find","surrogateKey","createKeyFromProps","obj","DIVIDER","join","removedCells","dimensionHierarchies","cube","removedCell","travers","removeMembers","restoreCell","dimensionTrees","getFacts","memberCopy","deleteMemberId","dicedCube","dice","getCells","handlers","handleDimensionTree","idValue","handler","Tuple","Space","newSpace","arg","arguments","space","add","targetSpace","otherSpace","Array","prototype","CellTable","cellData","isEmptyCell","Cube","isArray","createDimensionHierarchy","set","fixSpace","findDimensionTreeByDimension","call","getDimensionMembers","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","totalSpace","union","filteredCellTable","cellBelongsToSpace","somePropOfCellNotBelongToSpace","some","finded","newDimensionHierarchies","originalDimensionHierarchy","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","denormalize","newFactTable","anotherBuild","getDimensionTrees","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","TypeError","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","getRemoveMeasures","removedMeasures","destroyDimensionTree","cellOptions","emptyCells","tuples","cartesian","combination","unique","foreignKeysCellData","createEmptyCell","validateInstance","customCellOptions","residuals","createEmptyCells","addEmptyCells","addFacts","emptyCell","f","a","d","e","dimensionsOrder","tupleList","res","i","arr","item","rest","findDimensionTree","searchedDimensionTree","getDimensionTree","forSave","totalTuples","tuple","partFacts"],"mappings":"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"}