{"version":3,"file":"cube.js","sources":["../src/errors.js","../src/console.js","../src/Fact.js","../src/Cell.js","../src/EmptyCell.js","../src/Member.js","../src/const.js","../src/InputMember.js","../src/DimensionTable.js","../src/Tree.js","../src/DimensionTree.js","../src/DimensionHierarchy.js","../src/SnowflakeBuilder.js","../src/Tuple.js","../src/Space.js","../node_modules/lodash-es/_freeGlobal.js","../node_modules/lodash-es/_root.js","../node_modules/lodash-es/_Symbol.js","../node_modules/lodash-es/_getRawTag.js","../node_modules/lodash-es/_objectToString.js","../node_modules/lodash-es/_baseGetTag.js","../node_modules/lodash-es/_overArg.js","../node_modules/lodash-es/_getPrototype.js","../node_modules/lodash-es/isObjectLike.js","../node_modules/lodash-es/isPlainObject.js","../src/Cube.js"],"sourcesContent":["export class InsufficientRollupData {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, member for rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class NotFoundFactId {\n\tconstructor(name) {\n\t\tthis.message = `In fact data, no property was found with the name: ${name}`\n\t}\n}\n\nexport class NotCompletelySpaceException {\n\tconstructor(dimension) {\n\t\tthis.message = `Not completely defined space for added member, not found member for dimension: \"${dimension}\"`;\n\t}\n}\n\nexport class CantAddMemberRollupException {\n\tconstructor(dimension, id) {\n\t\tthis.message = `Can't add member, rollup dimension: ${dimension} with id: ${id} not found`;\n\t}\n}\n\nexport class DimensionException {\n\tconstructor(dimension) {\n\t\tthis.message = `For the name \"${dimension}\" the dimension is already set`;\n\t}\n}\n\nexport const handleError = error => {\n\terror.message = `[Cube] ${error.message}`\n\tthrow error;\n};\n","const originalConsole = console;\nconst customConsole = {\n\tlog: string => {\n\t\toriginalConsole.log(`[Cube] ${string}`)\n\t},\n\twarn: string => {\n\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t},\n\twarnOnce: (() => {\n\t\tconst memory = {};\n\t\treturn string => {\n\t\t\tif (!memory[string]) {\n\t\t\t\tmemory[string] = true;\n\t\t\t\toriginalConsole.warn(`[Cube] ${string}`)\n\t\t\t}\n\t\t};\n\t})()\n};\nexport default customConsole\n","import {handleError} from './errors.js'\nimport console from './console.js'\n\nconst isSimple = (value) => {\n\tlet type = typeof value;\n\treturn type !== 'object' && type !== 'function' && type !== 'undefined' || value === null\n};\n\nexport default class Fact {\n\t/**\n\t * @throw {NotFoundFactId}\n\t * */\n\tconstructor(data) {\n\t\ttry {\n\t\t\tfor (let key in data) {\n\t\t\t\tif (!data.hasOwnProperty(key)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSimple(data[key])) {\n\t\t\t\t\tthis[key] = data[key];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[Fact] value of prop \"${key}\" has an unspecified value: ${data[key]}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\thandleError(error);\n\t\t}\n\t}\n}\n","import Fact from './Fact.js'\n\n/**\n * Cell. A piece of data obtained by defining one element\n * in each dimension of a multidimensional array.\n * The cells of the hypercube can be empty or full.\n *\n * These are aggregated data\n *\n * summary - to describe the values of data in cells\n *\n * each cell is an intersection of all the dimensions of the cube\n * */\nexport default class Cell extends Fact {\n\n}\n","import Cell from './Cell.js'\n\nfunction uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tlet r = Math.random() * 16 | 0;\n\t\tlet v = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Empty cells - in the fact table there is no data for them\n * The cell is identified by a tuple\n * */\nexport default class EmptyCell extends Cell {\n\tconstructor(data, options) {\n\t\tif (!data.id) {\n\t\t\tdata.id = EmptyCell.generateId()\n\t\t}\n\t\tsuper(data, options)\n\t}\n\t/**\n\t * @return {EmptyCell}\n\t * */\n\tstatic createEmptyCell(options) {\n\t\treturn new EmptyCell(options)\n\t}\n\t/**\n\t * @param {Cell|{ id: string|number }} cell\n\t * @return {boolean}\n\t * */\n\tstatic isEmptyCell(cell) {\n\t\treturn typeof cell.id === 'string'\n\t}\n\t/**\n\t * @return {string}\n\t * */\n\tstatic generateId() {\n\t\treturn uuidv4()\n\t}\n}\n","/**\n * Element of dimension. Serving to determine the position and description of the data element\n * */\nexport default class Member {\n\tconstructor(data) {\n\t\tObject.assign(this, data);\n\t}\n\tstatic create(id, props, data, primaryKey) {\n\t\tif (!(this === Member || Member.isPrototypeOf(this))) {\n\t\t\tthrow Error('this.constructor must be prototype of Member')\n\t\t}\n\t\tconst memberData = {};\n\t\tmemberData[primaryKey] = id;\n\n\t\tprops.forEach(prop => {\n\t\t\t// исключить идентификатор самой сущности\n\t\t\tif (prop !== primaryKey) {\n\t\t\t\tmemberData[prop] = data[prop]\n\t\t\t}\n\t\t});\n\t\treturn new this(memberData)\n\t}\n}\n","export const DEFAULT_TEMPLATE_FOREIGN_KEY = '%s_id';\nexport const DEFAULT_FACT_ID_PROP = 'id';\nexport const DEFAULT_MEMBER_ID_PROP = 'id';\n","import Member from './Member.js'\n\n/**\n * Introductory elements. Input elements have values that are manually loaded\n * that is, they are not the result of calculating data\n * */\nexport default class InputMember extends Member {\n\tstatic create(id, memberData, data, primaryKey) {\n\t\tconst defaultValue = null;\n\t\tconst defaultData = {};\n\n\t\tmemberData.forEach(propName => {\n\t\t\tdefaultData[propName] = data.hasOwnProperty(propName) ? data[propName] : defaultValue\n\t\t});\n\n\t\treturn super.create(id, memberData, defaultData, primaryKey)\n\t}\n}\n","import Member from './Member.js'\nimport {DEFAULT_MEMBER_ID_PROP, DEFAULT_TEMPLATE_FOREIGN_KEY} from './const.js'\nimport InputMember from './InputMember.js'\n\n/**\n * Dimension is a dimension of a cube. A dimension is a primary organizer of measure and attribute information in a cube\n * A dimension will contain some members organized in some hierarchy or hierarchies containing levels.\n * */\nexport default class DimensionTable {\n\tconstructor({ dimension, foreignKey = DimensionTable.genericId(dimension), primaryKey = DEFAULT_MEMBER_ID_PROP, keyProps, otherProps = [], members = [], defaultMemberOptions = {}}) {\n\t\tif (!dimension || !keyProps) {\n\t\t\tthrow Error('Bad definition DimensionTable, params \\\"dimension\\\" and \\\"keyProps\\\" is required');\n\t\t}\n\t\tif (Object.keys(defaultMemberOptions).indexOf(primaryKey) !== -1) {\n\t\t\tthrow Error('Bad definition DimensionTable, \\\"defaultMemberOptions\\\" must not contain a \\\"primaryKey\\\" property');\n\t\t}\n\t\t/** Name of the dimension */\n\t\tthis.dimension = dimension;\n\t\t/** id name */\n\t\tthis.foreignKey = foreignKey;\n\t\t/** id name */\n\t\tthis.primaryKey = primaryKey;\n\t\t/** List of key names properties of the table belonging to the current dimension */\n\t\tthis.keyProps = [].concat(keyProps);\n\t\t/** List of additional names properties of the table belonging to the current dimension */\n\t\tthis.otherProps = [].concat(otherProps);\n\t\t/** member list */\n\t\tthis.members = members.map(memberData => {\n\t\t\treturn new Member(memberData, this.primaryKey)\n\t\t});\n\t\t/** member default property options */\n\t\tthis.defaultMemberOptions = {...defaultMemberOptions};\n\t}\n\t/**\n\t *\n\t * */\n\tsetMemberList(members) {\n\t\t[].splice.apply(this.members, [0, this.members.length].concat(members))\n\t}\n\t/**\n\t *\n\t * */\n\tclearMemberList() {\n\t\tthis.members = [];\n\t}\n\tgetMemberPrimaryKey(member) {\n\t\treturn member[this.primaryKey]\n\t}\n\tgetMemberForeignKey(member) {\n\t\treturn member[this.foreignKey]\n\t}\n\t/**\n\t * @param {Member} member\n\t * */\n\taddMember(member) {\n\t\tif (this.members.indexOf(member) === -1) {\n\t\t\tthis.members.push(member)\n\t\t} else {\n\t\t\tconsole.log('boo')\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * @param {object} memberOptions\n\t * @param {[]} linkProps\n\t * */\n\tcreateMember(memberOptions = {}, linkProps) {\n\t\t// todo тут нужна проверка на то, что все данные для члена измерения присутствуют\n\t\tconst memberData = {...this.defaultMemberOptions, ...memberOptions};\n\t\tconst { keyProps, otherProps, members, primaryKey } = this;\n\t\tconst keys = keyProps.concat(linkProps).concat(otherProps);\n\t\tconst id = DimensionTable.reduceId(members, primaryKey);\n\t\tconst member = InputMember.create(id, keys, memberData, primaryKey);\n\t\tthis.addMember(member);\n\t\treturn member;\n\t}\n\t/**\n\t * @public\n\t * Method of generating a unique identifier within the selected space\n\t * */\n\tstatic reduceId(members, primaryKey) {\n\t\tif (members.length) {\n\t\t\treturn members.reduce((acc, curValue) => {\n\t\t\t\treturn acc[primaryKey] > curValue[primaryKey] ? acc : curValue;\n\t\t\t}, 0)[primaryKey] + 1\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A way to create a name for a property in which a unique identifier will be stored\n\t * */\n\tstatic genericId(dimension) {\n\t\treturn DEFAULT_TEMPLATE_FOREIGN_KEY.replace('%s', dimension);\n\t}\n\tsetMemberId(member, id) {\n\t\tmember[this.primaryKey] = id;\n\t}\n\tdeleteMemberId(member) {\n\t\tdelete member[this.primaryKey]\n\t}\n\t/**\n\t *\n\t * */\n\tremoveMember(member) {\n\t\tconst index = this.members.indexOf(member);\n\t\tif (index === -1) {\n\t\t\tthrow new Error('represented member was not found', member);\n\t\t}\n\t\tthis.members.splice(index, 1);\n\t}\n\tstatic createDimensionTable(dimensionTable) {\n\t\treturn new DimensionTable(dimensionTable)\n\t}\n}\n","/**\n * Tree traversing https://en.wikipedia.org/wiki/Tree_traversal\n * @class Tree\n * @abstract class cannot be instantiated with new\n * */\nexport default class Tree {\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Object}\n\t * */\n\tgetTreeValue() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree|null}\n\t * */\n\tgetParentTree() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @abstract\n\t * @return {Tree[]}\n\t * */\n\tgetChildTrees() {\n\t\tthrow 'abstract method'\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisExternal() {\n\t\treturn !this.getChildTrees().length;\n\t}\n\t/**\n\t * @public\n\t * @return {boolean}\n\t * */\n\tisRoot() {\n\t\treturn this.getParentTree() === null;\n\t}\n\t/**\n\t * @public\n\t * Get root for that tree\n\t * @return {Tree}\n\t * */\n\tgetRoot() {\n\t\tlet root = this;\n\t\tthis.traceUpOrder((tracedTreeValue, tracedTree) => {\n\t\t\tif (tracedTree.isRoot()) {\n\t\t\t\troot = tracedTree;\n\t\t\t}\n\t\t});\n\t\treturn root;\n\t}\n\t/**\n\t * @public\n\t * A walk to root from current Tree, the current Tree and root entered to the chain\n\t * @param {function} callback\n\t * */\n\ttraceUpOrder(callback) {\n\t\tconst tree = this;\n\t\tconst parentTree = tree.getParentTree();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (parentTree !== null) {\n\t\t\tparentTree.traceUpOrder(callback);\n\t\t}\n\t}\n\t/**\n\t * @public\n\t * A walk in which the children are traversed before their respective parents are traversed\n\t * @param {function} callback\n\t * */\n\ttracePostOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePostOrder(callback);\n\t\t\t});\n\t\t}\n\t\tcallback(treeValue, tree);\n\t}\n\t/**\n\t * @public\n\t *  A walk in which each parent tree is traversed before its children is called a pre-order walk\n\t * */\n\ttracePreOrder(callback) {\n\t\tconst tree = this;\n\t\tconst childTrees = tree.getChildTrees();\n\t\tconst treeValue = tree.getTreeValue();\n\t\tcallback(treeValue, tree);\n\t\tif (childTrees.length) {\n\t\t\tchildTrees.forEach(childTree => {\n\t\t\t\tchildTree.tracePreOrder(callback);\n\t\t\t});\n\t\t}\n\t}\n}\n","import DimensionTable from './DimensionTable.js'\nimport Tree from './Tree.js'\nimport {DimensionException} from './errors.js'\n/**\n * It defines the relationship of generalization and specialization (roll-up/drill-down)\n * @throws {DimensionException}\n * */\nexport default class DimensionTree extends Tree {\n\tconstructor(dimensionTree) {\n\t\tsuper();\n\n\t\tconst {dimensionTable, level = [], parentNode = null} = dimensionTree;\n\t\t\n\t\tObject.defineProperties(this, {\n\t\t\tdimensionTable: {\n\t\t\t\t/**\n\t\t\t\t * @property\n\t\t\t\t * @name DimensionTree#dimensionTable\n\t\t\t\t * */\n\t\t\t\tvalue: DimensionTable.createDimensionTable(dimensionTable),\n\t\t\t\teditable: false,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\tparentNode: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree|null}\n\t\t\t\t * @name DimensionTree#parentNode\n\t\t\t\t * */\n\t\t\t\tvalue: parentNode,\n\t\t\t\tenumerable: false,\n\t\t\t\teditable: false\n\t\t\t},\n\t\t\tlevel: {\n\t\t\t\t/**\n\t\t\t\t * @property {DimensionTree[]}\n\t\t\t\t * @name DimensionTree#level\n\t\t\t\t * */\n\t\t\t\tvalue: level.map(dimensionTreeData => {\n\t\t\t\t\treturn new DimensionTree({ ...dimensionTreeData, parentNode: this })\n\t\t\t\t}),\n\t\t\t\tenumerable: true,\n\t\t\t\teditable: false\n\t\t\t}\n\t\t});\n\t\tthis.validateDimensions();\n\t}\n\tvalidateDimensions(){\n\t\tconst dimensions = [];\n\t\tthis.tracePostOrder(tracedDimensionTreeValue => {\n\t\t\tconst {dimension} = tracedDimensionTreeValue;\n\t\t\tif (dimensions.indexOf(dimension) === -1){\n\t\t\t\tdimensions.push(dimension)\n\t\t\t} else {\n\t\t\t\tthrow new DimensionException();\n\t\t\t}\n\t\t})\n\t}\n\tstatic createDimensionTree(dimensionTreeData) {\n\t\t// todo add validation\n\t\treturn new DimensionTree(dimensionTreeData);\n\t}\n\tstatic createProxyDimensionTree(dimensionTree){\n\t\tconst newDimensionTree = dimensionTree.cloneDimensionTreeWithoutMembers();\n\t\tdimensionTree.tracePostOrder(tracedTreeValue => {\n\t\t\tconst { dimension: tracedDimension, members } = tracedTreeValue;\n\t\t\t\n\t\t\tnewDimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(members);\n\t\t});\n\t\treturn newDimensionTree;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTable}\n\t * */\n\tgetTreeValue() {\n\t\treturn this.dimensionTable;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree|null}\n\t * */\n\tgetParentTree() {\n\t\treturn this.parentNode;\n\t}\n\t/**\n\t * @public\n\t * @return {DimensionTree[]}\n\t * */\n\tgetChildTrees() {\n\t\treturn this.level;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension\n\t * @return {DimensionTree|undefined}\n\t * */\n\tgetDimensionTreeByDimension(dimension) {\n\t\tconst root = this.getRoot();\n\t\tlet search = void 0;\n\t\troot.tracePostOrder((dimensionTreeValue, dimensionTree) => {\n\t\t\tif (dimensionTreeValue.dimension === dimension){\n\t\t\t\tsearch = dimensionTree;\n\t\t\t}\n\t\t});\n\t\treturn search;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * @return {DimensionTree|undefined}\n\t * */\n\tcreateProjectionOntoMember(member) {\n\t\t// 1 create copy of hierarchy with empty members\n\t\tconst newDimensionTreeByMember = this.cloneDimensionTreeWithoutMembers();\n\n\t\tthis.projectDrillDown(newDimensionTreeByMember, member);\n\t\tthis.projectDrillUp(newDimensionTreeByMember, member);\n\n\t\treturn newDimensionTreeByMember;\n\t}\n\tprojectDrillDown(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"traceUpOrder\", \"drillDownDimensionMembers\")\n\t}\n\tprojectDrillUp(dimensionTree, member){\n\t\tthis.projectDrill(dimensionTree, member, \"tracePreOrder\", \"drillUpDimensionMembers\")\n\t}\n\tprojectDrill(dimensionTree, member, traceMethodName, method){\n\t\tlet lastTracedMembers;\n\t\tlet lastTracedDimensionTree;\n\t\tthis[traceMethodName]((tracedDimensionTreeValue, tracedDimensionTree) => {\n\t\t\tconst { dimension: tracedDimension } = tracedDimensionTreeValue;\n\n\t\t\tconst drillMembers = tracedDimensionTree == this\n\t\t\t\t? [member]\n\t\t\t\t: lastTracedDimensionTree[method](lastTracedMembers);\n\n\t\t\tdimensionTree\n\t\t\t\t.getDimensionTreeByDimension(tracedDimension)\n\t\t\t\t.getTreeValue()\n\t\t\t\t.setMemberList(drillMembers);\n\n\t\t\tlastTracedMembers = drillMembers;\n\t\t\tlastTracedDimensionTree = tracedDimensionTree;\n\t\t});\n\t}\n\tcloneDimensionTreeWithoutMembers(){\n\t\t// todo new members must be not created here\n\t\tconst clone = new DimensionTree(this.getRoot());\n\t\tclone.tracePostOrder(dimensionTreeValue => {\n\t\t\tdimensionTreeValue.clearMemberList();\n\t\t});\n\t\treturn clone;\n\t}\n\t/**\n\t * @public\n\t * @param {Member} member\n\t * */\n\tremoveProjectionOntoMember(member) {\n\t\t// 1 get projection\n\t\tconst projectionDimensionTree = this.cloneDimensionTreeWithoutMembers();\n\t\tthis.projectDrillDown(projectionDimensionTree, member);\n\n\t\t// 2 subtract projection\n\t\tthis.subtractDimensionTree(projectionDimensionTree);\n\t\t// 3 return first level members of projection\n\t\tconst endToBeRemovedMember = {};\n\n\t\tconst {\n\t\t\tdimension: dimensionProjection,\n\t\t\tmembers: membersProjection\n\t\t} = projectionDimensionTree.getRoot().getTreeValue();\n\n\t\tendToBeRemovedMember[dimensionProjection] = membersProjection;\n\n\t\treturn endToBeRemovedMember;\n\t}\n\t/**\n\t * @private\n\t * @param {DimensionTree} dimensionTree\n\t * */\n\tsubtractDimensionTree(dimensionTree) {\n\t\t// remove intersection\n\t\tconst toBeRemovedSpace = {};\n\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeRemovedSpace[dimension] = members;\n\t\t});\n\n\t\tconst memberList = this.getTreeValue().members;\n\n\t\t// travers down\n\t\tif (memberList.length === 1) {\n\t\t\tthis.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\tconst {members: childMembers, dimension: childDimension} = tracedDimensionTable;\n\t\t\t\ttoBeRemovedSpace[childDimension] = childMembers;\n\t\t\t})\n\t\t}\n\n\t\t// remove removal space\n\t\tObject.keys(toBeRemovedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeRemovedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.removeMember(member);\n\t\t\t})\n\t\t});\n\t}\n\tunionDimensionTree(dimensionTree){\n\t\tconst toBeAddedSpace = {};\n\t\tdimensionTree.tracePostOrder(dimensionTreeValue => {\n\t\t\tconst {dimension, members} = dimensionTreeValue;\n\t\t\ttoBeAddedSpace[dimension] = members;\n\t\t});\n\n\t\tObject.keys(toBeAddedSpace).forEach(dimension => {\n\t\t\tconst currentDimensionTree = this.getDimensionTreeByDimension(dimension);\n\t\t\tconst dimensionTable = currentDimensionTree.getTreeValue();\n\t\t\ttoBeAddedSpace[dimension].forEach(member => {\n\t\t\t\tdimensionTable.addMember(member);\n\t\t\t})\n\t\t});\n\t}\n\t/**\n\t * @public\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillDownDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isRoot()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst parentTree = this.getParentTree();\n\t\tconst parentDimensionTable = parentTree.getTreeValue();\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst { members: parentMembers } = parentDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tparentMembers.forEach(parentMember => {\n\t\t\t\tif (dimensionTable.getMemberForeignKey(parentMember) === parentDimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\tif (drillMembers.indexOf(parentMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(parentMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @this {DimensionTree}\n\t * @param {Member[]} members\n\t * @return {Member[]}\n\t * */\n\tdrillUpDimensionMembers(members = this.getTreeValue().members) {\n\t\tif (this.isExternal()) {\n\t\t\treturn members;\n\t\t}\n\t\tconst childTree = this.getChildTrees()[0]; // for one child always\n\t\tconst childDimensionTable = childTree.getTreeValue();\n\t\tconst { members: childMembers } = childDimensionTable;\n\t\tconst drillMembers = [];\n\t\tmembers.forEach(member => {\n\t\t\tchildMembers.forEach(childMember => {\n\t\t\t\tif (childDimensionTable.getMemberForeignKey(member) === childDimensionTable.getMemberPrimaryKey(childMember)) {\n\t\t\t\t\tif (drillMembers.indexOf(childMember) === -1) {\n\t\t\t\t\t\tdrillMembers.push(childMember)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\treturn drillMembers;\n\t}\n\t/**\n\t * @public\n\t * @param {object?} memberOptions\n\t * */\n\tcreateMember(memberOptions = {}) {\n\t\tconst dimensionTable = this.getTreeValue();\n\t\tconst childIdAttributes = this.getChildTrees().map(dimensionTree =>\n\t\t\tdimensionTree.getTreeValue().foreignKey\n\t\t);\n\t\tconst linkProps = [];\n\t\tchildIdAttributes.forEach(foreignKey => {\n\t\t\tlinkProps.push(foreignKey)\n\t\t});\n\t\treturn dimensionTable.createMember(memberOptions, linkProps)\n\t}\n}\n","import DimensionTree from './DimensionTree.js'\n\n/**\n * The elements of a dimension can be organized as a hierarchy\n * Hierarchy is a dimension hierarchy of a cube\n * */\nexport default class DimensionHierarchy {\n\tconstructor({ dimensionTree, activeDimension, hierarchy}) {\n\t\tif (!hierarchy) {\n\t\t\tthrow Error('attribute \"hierarchy\" must be defined')\n\t\t}\n\t\tthis.dimensionTree = dimensionTree instanceof DimensionTree\n\t\t\t? dimensionTree\n\t\t\t: DimensionTree.createDimensionTree(dimensionTree);\n\t\tthis.activeDimension = activeDimension || this.dimensionTree.getTreeValue().dimension;\n\t\tthis.hierarchy = hierarchy;\n\t}\n\tgetDimensionTree() {\n\t\treturn this.dimensionTree;\n\t}\n\thasDimension(dimension) {\n\t\treturn !!this.dimensionTree.getDimensionTreeByDimension(dimension);\n\t}\n\tgetActiveDimension() {\n\t\treturn this.activeDimension;\n\t}\n\tsetActiveDimension(activeDimension) {\n\t\tthis.activeDimension = activeDimension;\n\t}\n\tgetHierarchy() {\n\t\treturn this.hierarchy;\n\t}\n\tstatic createDimensionHierarchy(dimensionHierarchy) {\n\t\treturn new DimensionHierarchy(dimensionHierarchy)\n\t}\n}\n","import Member from './Member.js'\n\n/**\n * The main task is to parse the data array into tables\n *\n * is a special case of snowflake dimensionHierarchies\n * where every dimension is represented by one table even if the dimensions has multiple levels\n *\n * snowflaking - normalization process of measurement tables\n * */\nexport default class SnowflakeBuilder {\n\tstatic anotherBuild(factTable, cells, dimensionsTrees, cellTable, factPrimaryKey) {\n\n\t\t// for each dimension\n\t\tdimensionsTrees.forEach(dimensionTree => {\n\t\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey);\n\t\t});\n\t}\n\n\tstatic anotherBuildOne(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\t// for each hierarchy and level of dimension\n\t\tdimensionTree.tracePostOrder((dimensionTable, dimensionTree) => {\n\t\t\tSnowflakeBuilder.processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey)\n\t\t});\n\t}\n\n\tstatic processDimension(dimensionTree, cells, cellTable, factTable, factPrimaryKey) {\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { dimension, keyProps = [], otherProps = [], members: memberList, foreignKey, primaryKey } = dimensionTable;\n\t\tconst childIdAttributes = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().foreignKey);\n\t\tconst childDimensions = dimensionTree.getChildTrees().map(dimensionTree => dimensionTree.getTreeValue().dimension);\n\n\t\tlet members;\n\n\t\tconst existMemberCount = memberList.length;\n\t\tconst args = [factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, cells, dimension, keyProps, otherProps, cells, cellTable];\n\n\t\tif (!childIdAttributes.length) {\n\t\t\tmembers = SnowflakeBuilder.makeMemberList.apply(null, args);\n\t\t} else {\n\t\t\tlet entitiesParts = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(childDimensions[0]).getTreeValue();\n\t\t\tconst memberListForFilter = dimensionTable.members;\n\t\t\tentitiesParts = SnowflakeBuilder.mapFilter(childIdAttributes[0], cells, memberListForFilter, dimensionTable);\n\t\t\tmembers = SnowflakeBuilder.makeMemberListLevel.apply(null, args.concat([childIdAttributes, entitiesParts]));\n\t\t}\n\n\t\tfunction deleteProps(fact, props, factPrimaryKey) {\n\t\t\tprops.forEach(prop => {\n\t\t\t\tif (prop !== factPrimaryKey) {\n\t\t\t\t\tdelete fact[prop];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// только после того как список сформирован, удалаять данные из ячеек\n\t\tcells.forEach(cell => {\n\t\t\tdeleteProps(cell, keyProps, factPrimaryKey);\n\t\t\tdeleteProps(cell, otherProps, factPrimaryKey);\n\t\t});\n\n\t\tmembers.forEach(member => {\n\t\t\tdimensionTable.addMember(member)\n\t\t});\n\t}\n\t/**\n\t * Method filter cells by members of a dimension\n\t * @param {string} foreignKey\n\t * @param {Cell[]} cells\n\t * @param {Member[]} memberList\n\t * @param {DimensionTable} dimensionTable\n\t * @private\n\t * @return {Cell[]}\n\t * */\n\tstatic mapFilter(foreignKey, cells, memberList, dimensionTable) {\n\t\tconst cellTables = [];\n\t\t//todo оптимизировать поиск через хеш\n\t\tmemberList.forEach(member => {\n\t\t\tconst cellTableFiltered = cells.filter(cell => {\n\t\t\t\treturn cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member);\n\t\t\t});\n\t\t\tcellTables.push(cellTableFiltered);\n\t\t});\n\t\treturn cellTables;\n\t}\n\t/**\n\t * @private\n\t * */\n\tstatic makeMemberListLevel(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, whatIsIt, dimension, keyProps, otherProps, cells, cellTable, childIdAttributes, entitiesParts) {\n\t\tlet totalMemberList = [];\n\n\t\tlet countId = 0;\n\t\tentitiesParts.forEach(entitiesPart => {\n\t\t\tif (entitiesPart.length) {\n\t\t\t\tconst members = SnowflakeBuilder.makeMemberList(factPrimaryKey, primaryKey, foreignKey, existMemberCount, factTable, entitiesPart, dimension, keyProps, otherProps, cells, cellTable, countId);\n\t\t\t\tcountId = countId + members.length;\n\n\t\t\t\tconst etalon = entitiesPart[0];\n\n\t\t\t\tchildIdAttributes.forEach(childIdAttribute => {\n\n\t\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\t\tmember[childIdAttribute] = etalon[childIdAttribute];\n\t\t\t\t\t\tmember[primaryKey] = (existMemberCount + totalMemberList.length + 1);\n\t\t\t\t\t\ttotalMemberList.push(member)\n\t\t\t\t\t});\n\n\t\t\t\t\tentitiesPart.forEach(entityPart => {\n\t\t\t\t\t\tdelete entityPart[childIdAttribute];\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totalMemberList;\n\t}\n\n\t/**\n\t * The method of analyzing the data array and generating new dimension values\n\t *\n\t * @param {object[]} entitiesPart - Data array to the analysis of values for dimension\n\t * @param {number} startFrom\n\t * @param {string} dimension - The dimension for which members will be created\n\t * @param {string[]} keyProps - Names of properties whose values will be used to generate a key that will determine the uniqueness of the new member for dimension\n\t * @param {string[]} otherProps - Names of properties whose values will be appended to the dimension member along with the key properties\n\t * @param {Cell} cells\n\t * @param {Cell[]} cellTable\n\t * @return {[]}\n\t * @private\n\t * */\n\tstatic makeMemberList(\n\t\tfactPrimaryKey,\n\t\tprimaryKey,\n\t\tforeignKey,\n\t\texistMemberCount,\n\t\tfactTable,\n\t\tentitiesPart,\n\t\tdimension,\n\t\tkeyProps = [],\n\t\totherProps = [],\n\t\tcells,\n\t\tcellTable,\n\t\t// It is recommended that the key field be a simple integer because a key value is meaningless\n\t\tstartFrom = 0\n\t) {\n\t\t// соотношение созданных id к ключам\n\t\tconst cache = {};\n\t\tconst restoredCache = {};\n\t\tconst members = [];\n\n\t\t// need restore cache\n\t\tconst existedCells = cellTable.filter(cell => {\n\t\t\treturn cells.indexOf(cell) === -1\n\t\t});\n\t\texistedCells.forEach(cell => {\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst fact = factTable.find(fact => fact[factPrimaryKey] === cell[factPrimaryKey]);\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, fact);\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in restoredCache)) {\n\t\t\t\trestoredCache[surrogateKey] = ++startFrom;\n\t\t\t}\n\t\t});\n\n\t\t// создания групп по уникальным ключам\n\t\tentitiesPart.forEach(entityPart => {\n\n\t\t\t// собрать ключ на основе ключевых значений\n\t\t\tconst surrogateKey = SnowflakeBuilder.createKeyFromProps(keyProps, entityPart);\n\n\t\t\t// если ключ уникальный создается подсущность и назначается ей присваивается уникальный id (уникальность достигается простым счетчиком)\n\t\t\tif (!(surrogateKey in cache) && !(surrogateKey in restoredCache)) {\n\t\t\t\tcache[surrogateKey] = ++startFrom;\n\t\t\t}\n\n\t\t\t// оставить в нормальной форме ссылку на id под сущности\n\t\t\tconst id = cache[surrogateKey];\n\t\t\tentityPart[foreignKey] = id;\n\t\t});\n\n\t\tObject.keys(cache).forEach(key => {\n\t\t\tconst id = cache[key];\n\t\t\tconst entityPart = entitiesPart.find(entityPart => entityPart[foreignKey] === id);\n\t\t\tconst member = Member.create(id, [].concat(keyProps).concat(otherProps), entityPart, primaryKey);\n\t\t\tmembers.push(member);\n\t\t});\n\n\t\treturn members;\n\t}\n\n\tstatic createKeyFromProps(props, obj) {\n\t\tconst DIVIDER = ',';\n\n\t\treturn props.map(prop => {\n\t\t\treturn obj[prop]\n\t\t}).join(DIVIDER);\n\t}\n\n\tstatic destroy(cellTable, removedCells, dimensionHierarchies, cube) {\n\t\t// first remove cells\n\t\tremovedCells.forEach(removedCell => {\n\t\t\tconst index = cellTable.indexOf(removedCell);\n\t\t\tif (index !== -1) {\n\t\t\t\tcellTable.splice(index, 1);\n\t\t\t}\n\t\t});\n\t\t// then remove members\n\t\tremovedCells.forEach(fact => {\n\t\t\tdimensionHierarchies.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to generate fact tables from cells\n\t * */\n\tstatic denormalize(cellTable, dimensionTrees) {\n\t\tconst facts = [];\n\t\tcellTable.forEach(cell => {\n\t\t\tfacts.push({...cell})\n\t\t});\n\t\tfacts.forEach(fact => {\n\t\t\tdimensionTrees.forEach(dimensionTree => {\n\t\t\t\tSnowflakeBuilder.travers([fact], dimensionTree, [SnowflakeBuilder.restoreCell]);\n\t\t\t});\n\t\t});\n\n\t\treturn facts;\n\t}\n\tstatic restoreCell(member, memberList, dimension, cell, foreignKey, dimensionTable) {\n\t\tconst memberCopy = new Member(member);\n\t\tdimensionTable.deleteMemberId(memberCopy);\n\t\tdelete cell[foreignKey];\n\t\tObject.assign(cell, memberCopy)\n\t}\n\tstatic removeMembers(cube, dimensionTree, member, memberList, dimension, cell, foreignKey) {\n\t\tconst dicedCube = cube.dice({ [dimension]: member });\n\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t// last cell was removed at the beginning of the algorithm,\n\t\t// so if the member is no longer used, the projection will be empty\n\t\tif (!dicedCube.getCells().length) {\n\t\t\tdimensionTable.removeMember(member)\n\t\t}\n\t}\n\n\tstatic travers(cellTable, dimensionTree, handlers = () => {}) {\n\t\tconst handleDimensionTree = (dimensionTable, cell) => {\n\t\t\tconst { dimension, members: memberList, foreignKey } = dimensionTable;\n\t\t\tconst idValue = cell[foreignKey];\n\t\t\tconst member = memberList.find(member => {\n\t\t\t\treturn dimensionTable.getMemberPrimaryKey(member) === idValue;\n\t\t\t});\n\t\t\thandlers.forEach(handler => {\n\t\t\t\thandler(member, memberList, dimension, cell, foreignKey, dimensionTable);\n\t\t\t})\n\t\t};\n\t\tcellTable.forEach(cell => {\n\t\t\tdimensionTree.tracePreOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\t\thandleDimensionTree(tracedDimensionTable, cell)\n\t\t\t})\n\t\t});\n\t}\n\n\t/**\n\t * Method allows to delete dimensionTree from cube,\n\t * the cells will be restored, and the members of the measurement are also deleted\n\t * */\n\tstatic destroyDimensionTree(cellTable, removedCells, dimensionTree, cube) {\n\t\tSnowflakeBuilder.travers(cellTable, dimensionTree, [SnowflakeBuilder.removeMembers.bind(this, cube, dimensionTree), SnowflakeBuilder.restoreCell]);\n\t}\n\n}\n","/**\n * The cell is identified by a tuple\n * tuples can uniquely identify every cell in the cube\n * Tuple is an ordered collection of one or more members from different dimensions\n * */\nexport default class Tuple {\n\tconstructor(options) {\n\t\tObject.assign(this, options)\n\t}\n}\n","export default class Space {\n\t/**\n\t *\n\t * */\n\tstatic union() {\n\t\tconst newSpace = {};\n\t\tconst arg = [...arguments];\n\t\targ.forEach(space => {\n\t\t\tSpace.add(newSpace, space);\n\t\t});\n\t\treturn newSpace;\n\t}\n\t/**\n\t *\n\t * */\n\tstatic add(targetSpace, otherSpace) {\n\t\tObject.keys(otherSpace).forEach(key => {\n\t\t\tif (!targetSpace[key]) {\n\t\t\t\ttargetSpace[key] = [];\n\t\t\t}\n\t\t\tArray.prototype.push.apply(targetSpace[key], otherSpace[key])\n\t\t})\n\t}\n}\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import EmptyCell from './EmptyCell.js'\nimport Member from './Member.js'\nimport DimensionTree from './DimensionTree.js'\nimport DimensionHierarchy from './DimensionHierarchy.js'\nimport DimensionTable from './DimensionTable.js'\nimport {\n\tInsufficientRollupData,\n} from './errors.js';\nimport SnowflakeBuilder from './SnowflakeBuilder.js'\nimport console from './console.js'\nimport Tuple from './Tuple.js'\nimport Space from './Space.js'\nimport Cell from './Cell.js'\nimport { DEFAULT_FACT_ID_PROP } from './const.js'\nimport isPlainObject from \"./../node_modules/lodash-es/isPlainObject.js\"\nimport {NotFoundFactId} from \"./errors.js\";\n\n/**\n * It a means to retrieve data\n *\n * Base class for normalizing a denormalized data array\n * and analyzing query according to a given scheme\n *\n * */\nclass Cube {\n\t/**\n\t * @param {object | Cube} cube\n\t * @throw {TypeError}\n\t * */\n\tconstructor(cube = {}) {\n\t\tif (!(isPlainObject(cube) || cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be plain object or instance of Cube')\n\t\t}\n\t\tlet {\n\t\t\tdimensionHierarchies = [],\n\t\t\tcellTable = [],\n\t\t\tdefaultFactOptions = {},\n\t\t\tfactPrimaryKey = DEFAULT_FACT_ID_PROP\n\t\t} = cube;\n\n\t\tthis.defaultFactOptions = defaultFactOptions;\n\t\tthis.factPrimaryKey = factPrimaryKey;\n\n\t\tthis.dimensionHierarchies = dimensionHierarchies.map(dimensionHierarchy => {\n\t\t\t// duck\n\t\t\tif (dimensionHierarchy.hierarchy) {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionHierarchy) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionHierarchy.createDimensionHierarchy(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else if (dimensionHierarchy.dimensionTable) {\n\t\t\t\tif ( dimensionHierarchy instanceof DimensionTree ){\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dimensionHierarchy instanceof DimensionTable) {\n\t\t\t\t\treturn dimensionHierarchy;\n\t\t\t\t} else {\n\t\t\t\t\treturn DimensionTable.createDimensionTable(dimensionHierarchy);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.cellTable = cellTable.map(cellData => {\n\t\t\tif (cellData instanceof Cell) {\n\t\t\t\treturn cellData\n\t\t\t} else {\n\t\t\t\treturn EmptyCell.isEmptyCell(cellData) ? new EmptyCell(cellData) : new Cell(cellData)\n\t\t\t}\n\t\t});\n\n\t\t// const residuals = residuals(this);\n\t\t// const count = residuals.length;\n\t\t// if (count > 0) {\n\t\t// \tconsole.warn('Fact table has residuals', residuals)\n\t\t// }\n\t}\n\t/**\n\t * is the act of picking a rectangular subset of a cube by choosing a single value\n\t * for one of its dimensions, creating a new cube with one fewer dimension.\n\t * @public\n\t * @param {string} dimension\n\t * @param {Member} member\n\t * @return {Cube}\n\t * */\n\tslice(dimension, member) {\n\t\treturn this.dice({ [dimension]: member })\n\t}\n\t/**\n\t * @public\n\t * @param {object} set\n\t * @return {Cube}\n\t * @throw {TypeError}\n\t * @throw {RangeError}\n\t * */\n\tdice(set) {\n\t\tif (!(isPlainObject(set) || set instanceof Tuple)){\n\t\t\tthrow TypeError(\"The argument must be a plain object\")\n\t\t}\n\t\t\n\t\t// always work with arrays as value\n\t\tconst toMultiset = (value) => {\n\t\t\treturn Array.isArray(value) ? value : [value];\n\t\t};\n\t\t\n\t\t// change member data to original member objects\n\t\tconst toOriginal = (membersData, dimension) => {\n\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\tconst members = dimensionTable.members;\n\t\t\t//replace memberData with original members\n\t\t\tmembersData.forEach((memberData, index) => {\n\t\t\t\tlet member = members.find(member => dimensionTable.getMemberPrimaryKey(member) === dimensionTable.getMemberPrimaryKey(memberData));\n\t\t\t\tif (!member) {\n\t\t\t\t\tthrow RangeError(`Not found member by id ${dimensionTable.getMemberPrimaryKey(member)}`)\n\t\t\t\t}\n\t\t\t\tif (membersData instanceof Member){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmembersData[index] = member;\n\t\t\t});\n\t\t\treturn membersData;\n\t\t};\n\t\t\n\t\tconst originalMultiset = {};\n\t\tObject.keys(set).forEach((dimension) => {\n\t\t\tlet value = set[dimension];\n\t\t\tvalue = toMultiset(value);\n\t\t\tvalue = toOriginal(value, dimension);\n\t\t\toriginalMultiset[dimension] = value;\n\t\t});\n\t\t\n\t\tconst dimensions = Object.keys(originalMultiset);\n\t\t\n\t\t// 1 make one projection on to member\n\t\tconst dimensionHierarchiesLength = this.dimensionHierarchies.length;\n\t\tif (dimensions.length > dimensionHierarchiesLength) {\n\t\t\tthrow Error(`Set must have a size not more than ${dimensionHierarchiesLength} dimensions`)\n\t\t}\n\n\t\tconst projectionDimensionHierarchies = [];\n\n\t\t// for every dimension in set\n\t\tconst totalSpaces = dimensions.map(dimension => {\n\n\t\t\tlet dimensionTreeProjection;\n\t\t\tconst members = originalMultiset[dimension];\n\t\t\t// ищется его расширенная версия для каждого члена\n\t\t\tconst spacesForCells = members.map(member => {\n\n\t\t\t\tlet searchedInTree = getDimensionTreeByDimension.call(this, dimension);\n\n\t\t\t\tconst current = searchedInTree.cloneDimensionTreeWithoutMembers();\n\n\t\t\t\tsearchedInTree.projectDrillDown(current, member);\n\t\t\t\tsearchedInTree.projectDrillUp(current, member);\n\n\t\t\t\tif (dimensionTreeProjection){\n\t\t\t\t\tdimensionTreeProjection.unionDimensionTree(current)\n\t\t\t\t} else {\n\t\t\t\t\tdimensionTreeProjection = current;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\tdimension: dimensionProjection,\n\t\t\t\t\tmembers: membersProjection\n\t\t\t\t} = dimensionTreeProjection.getRoot().getTreeValue();\n\n\t\t\t\treturn { [dimensionProjection]: membersProjection };\n\t\t\t});\n\n\t\t\tif (dimensionTreeProjection){\n\t\t\t\tprojectionDimensionHierarchies.push(dimensionTreeProjection);\n\t\t\t}\n\n\t\t\t// после чего эти расширенные версии объекдиняются\n\t\t\tconst totalSpace = Space.union(...spacesForCells);\n\n\t\t\treturn totalSpace;\n\t\t});\n\n\t\t// фильтрация продолжается\n\t\tlet filteredCellTable = this.getCells();\n\n\t\tconst cellBelongsToSpace = (cell, space) => {\n\t\t\tconst somePropOfCellNotBelongToSpace = Object.keys(space).some(dimension => {\n\t\t\t\tconst members = space[dimension];\n\t\t\t\tconst { foreignKey, primaryKey } = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\t\tconst finded = members.find(member => {\n\t\t\t\t\treturn member[primaryKey] === cell[foreignKey]\n\t\t\t\t});\n\t\t\t\treturn !finded;\n\t\t\t});\n\t\t\treturn !somePropOfCellNotBelongToSpace;\n\t\t};\n\n\t\ttotalSpaces.forEach(space => {\n\t\t\t// и ищутся те ячейки, которые принадлежат получившейся области\n\t\t\tfilteredCellTable = filteredCellTable.filter(cell => {\n\t\t\t\treturn cellBelongsToSpace(cell, space)\n\t\t\t});\n\t\t});\n\n\t\t// 2 create new list of dimensionHierarchies\n\t\tconst newDimensionHierarchies = [];\n\t\tthis.dimensionHierarchies.forEach(originalDimensionHierarchy => {\n\t\t\tlet finded = false;\n\t\t\tprojectionDimensionHierarchies.forEach(projectionDimensionHierarchy => {\n\t\t\t\tif (originalDimensionHierarchy.getTreeValue().dimension === projectionDimensionHierarchy.getTreeValue().dimension) {\n\t\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t\t\tfinded = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!finded) {\n\t\t\t\tconst { members, dimension } = originalDimensionHierarchy.getTreeValue();\n\t\t\t\tconst projectionDimensionHierarchy = DimensionTree.createProxyDimensionTree(originalDimensionHierarchy);\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tlet memberBelongToCells = false;\n\t\t\t\t\tfilteredCellTable.forEach(filteredCell => {\n\t\t\t\t\t\tif (cellBelongsToSpace(filteredCell, { [dimension]: [member] })) {\n\t\t\t\t\t\t\tmemberBelongToCells = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!memberBelongToCells) {\n\t\t\t\t\t\tlet has = projectionDimensionHierarchy.getTreeValue().members.indexOf(member) !== -1;\n\t\t\t\t\t\tif (has) {\n\t\t\t\t\t\t\tprojectionDimensionHierarchy.removeProjectionOntoMember(member)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewDimensionHierarchies.push(projectionDimensionHierarchy);\n\t\t\t}\n\t\t});\n\n\t\treturn new SubCube({\n\t\t\tcellTable: filteredCellTable,\n\t\t\tdimensionHierarchies: newDimensionHierarchies,\n\t\t\toriginalCube: this.originalCube || this,\n\t\t\tpreviousCube: this\n\t\t})\n\t}\n\t/**\n\t * The cube introduces generalization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillUp(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * The cube introduced specialization relations\n\t * it's operations on dimension hierarchies\n\t * @public\n\t * @param {string} hierarchy\n\t * @param {string} targetDimension\n\t * @return {Cube}\n\t * */\n\tdrillDown(hierarchy, targetDimension) {\n\t\tconst currentHierarchy = getHierarchy.call(this, hierarchy);\n\t\tif (currentHierarchy && currentHierarchy.hasDimension(targetDimension)) {\n\t\t\tcurrentHierarchy.setActiveDimension(targetDimension);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @return {Fact[]} returns facts\n\t * */\n\tgetFacts() {\n\t\treturn denormalize.call(this, this.getCells());\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * @return {Cube}\n\t * */\n\taddFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tfacts.forEach(validateFactData.bind(null, this.factPrimaryKey));\n\t\tconst cells = facts.map(fact => new Cell(fact));\n\t\t[].push.apply(this.getCells(), cells);\n\t\tconst factTable = this.getFacts();\n\t\tSnowflakeBuilder.anotherBuild(factTable, cells, getDimensionTrees.call(this), this.getCells(), this.factPrimaryKey);\n\t\treturn this;\n\t}\n\t/**\n\t * @public\n\t * @param {Object[]} facts\n\t * @throw {TypeError}\n\t * */\n\tremoveFacts(facts) {\n\t\tif (!Array.isArray(facts)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tconst cellTable = this.getCells();\n\t\tconst factPrimaryKey = this.factPrimaryKey;\n\t\tconst removedCells = facts.map(fact => {\n\t\t\treturn cellTable.find(cell => cell[factPrimaryKey] === fact[factPrimaryKey])\n\t\t});\n\t\tthis.removeCells(removedCells);\n\t}\n\t/**\n\t * @public\n\t * @return {Cell[]}\n\t * */\n\tgetCells() {\n\t\treturn this.cellTable;\n\t}\n\t/**\n\t * @public\n\t * @param {Cell[]} cells\n\t * @throw {TypeError}\n\t * */\n\tremoveCells(cells) {\n\t\tif (!Array.isArray(cells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\tcells.forEach((cell) => {\n\t\t\tif (!(cell instanceof Cell)){\n\t\t\t\tthrow TypeError('The list of cells must contain only instances of Cell and EmptyCell')\n\t\t\t}\n\t\t});\n\t\tSnowflakeBuilder.destroy(this.getCells(), cells, this.dimensionHierarchies, this);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be found\n\t * @return {Member[]} returns members\n\t * @throw {TypeError}\n\t * */\n\tgetDimensionMembers(dimension) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be string')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\treturn dimensionTree.getTreeValue().members;\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension in which the member is created\n\t * @param {object?} customMemberOptions - properties for the created member\n\t * @param {object?} rollupCoordinatesData\n\t * @param {object?} drillDownCoordinatesOptions\n\t * @param {object?} cellData\n\t * @throw {InsufficientRollupData}\n\t * */\n\taddDimensionMember(dimension, customMemberOptions = {}, rollupCoordinatesData = {}, drillDownCoordinatesOptions = {}, cellData = {}) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(\n\t\t\tisPlainObject(customMemberOptions)\n\t\t\t&& isPlainObject(rollupCoordinatesData)\n\t\t\t&& isPlainObject(drillDownCoordinatesOptions)\n\t\t\t&& isPlainObject(cellData)\n\t\t)){\n\t\t\tthrow TypeError('The arguments after the first must be plain objects')\n\t\t}\n\t\t\n\t\t// todo №1, а если члены с такими ключами уже существуют, нужнен варнинг, потому что, после десериализации член исчезнет, если не будут изменены значения ключевых полей\n\t\tconst rollupCoordinates = {};\n\t\tObject.keys(rollupCoordinatesData).forEach(dimension => {\n\t\t\tconst memberData = rollupCoordinatesData[dimension];\n\t\t\tconst memberList = this.getDimensionMembers(dimension);\n\t\t\tconst dimensionTable = getDimensionTreeByDimension.call(this, dimension).getTreeValue();\n\t\t\tconst { primaryKey } = dimensionTable;\n\t\t\tconst id = memberData[primaryKey];\n\t\t\tconst find = memberList.find(member => {\n\t\t\t\treturn id === dimensionTable.getMemberPrimaryKey(member)\n\t\t\t});\n\t\t\tif (!find) {\n\t\t\t\tthrow new InsufficientRollupData(dimension, id)\n\t\t\t} else {\n\t\t\t\trollupCoordinates[dimension] = find;\n\t\t\t}\n\t\t});\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst childDimensionTrees = dimensionTree.getChildTrees();\n\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\tconst { foreignKey } = dimensionTable;\n\t\tconst foreignKeysMemberData = {};\n\t\tchildDimensionTrees.forEach(childDimensionTree => {\n\t\t\tconst dimensionTable = childDimensionTree.getTreeValue();\n\t\t\tconst { dimension, foreignKey, primaryKey } = dimensionTable;\n\t\t\tconst member = rollupCoordinatesData[dimension];\n\t\t\tif (!member) {\n\t\t\t\tthrow new InsufficientRollupData(dimension)\n\t\t\t} else {\n\t\t\t\tforeignKeysMemberData[foreignKey] = member[primaryKey];\n\t\t\t}\n\t\t});\n\t\t// todo проверить, что customMemberOptions не содержит внешних ключей\n\t\tconst memberOptions = Object.assign({}, customMemberOptions, foreignKeysMemberData);\n\n\t\tlet saveMember = dimensionTree.createMember(memberOptions);\n\t\tlet saveIdAttribute = foreignKey;\n\t\tdimensionTree.traceUpOrder((tracedDimensionTable, tracedDimensionTree) => {\n\t\t\tif (dimensionTree !== tracedDimensionTree) {\n\t\t\t\tconst { dimension: parentDimension, foreignKey: parentIdAttribute } = tracedDimensionTable;\n\t\t\t\tconst drillDownCoordinatesData = { [ saveIdAttribute]: dimensionTable.getMemberPrimaryKey(saveMember) };\n\t\t\t\tObject.assign(drillDownCoordinatesData, drillDownCoordinatesOptions[parentDimension]);\n\t\t\t\tsaveMember = tracedDimensionTree.createMember(drillDownCoordinatesData);\n\t\t\t\tsaveIdAttribute = parentIdAttribute;\n\t\t\t}\n\t\t});\n\t\tthis.fillEmptyCells(cellData);\n\t}\n\t/**\n\t * @public\n\t * @param {string} dimension - dimension from which the member will be removed\n\t * @param {Member} member - the member will be removed\n\t * throw {TypeError}\n\t * */\n\tremoveDimensionMember(dimension, member) {\n\t\tif (!(typeof dimension === 'string')){\n\t\t\tthrow TypeError('The first argument must be instance of string')\n\t\t}\n\t\tif (!(member instanceof Member)){\n\t\t\tthrow TypeError('The second argument must be instance of Member')\n\t\t}\n\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\tconst endToBeRemoved = dimensionTree.removeProjectionOntoMember(member);\n\t\tconst cellTable = this.getCells();\n\t\tconst getRemoveMeasures = (dimension, members) => {\n\t\t\tconst removedCells = [];\n\t\t\tconst dimensionTable = dimensionTree.getDimensionTreeByDimension(dimension).getTreeValue();\n\t\t\tconst foreignKey = dimensionTable.foreignKey;\n\n\t\t\t// todo mapFilter похоже\n\t\t\tcellTable.forEach(cell => {\n\t\t\t\tmembers.forEach(member => {\n\t\t\t\t\tif (cell[foreignKey] == dimensionTable.getMemberPrimaryKey(member)) {\n\t\t\t\t\t\tremovedCells.push(cell)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\treturn removedCells;\n\t\t};\n\t\tObject.keys(endToBeRemoved).map(dimension => {\n\t\t\tconst removedMeasures = getRemoveMeasures(dimension, endToBeRemoved[dimension]);\n\t\t\tremovedMeasures.forEach(cell => {\n\t\t\t\tconst index = cellTable.indexOf(cell);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcellTable.splice(index, 1);\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\t/**\n\t * @public\n\t * @param {object|DimensionTree} dimensionHierarchy\n\t * @throw {TypeError}\n\t * */\n\taddDimensionHierarchy(dimensionHierarchy) {\n\t\tconst dimensionTree = DimensionTree.createDimensionTree(dimensionHierarchy);\n\t\tthis.dimensionHierarchies.push(\n\t\t\tdimensionTree\n\t\t);\n\t\tSnowflakeBuilder.anotherBuildOne(dimensionTree, this.getCells(), this.getCells(), this.getCells(), this.factPrimaryKey);\n\t}\n\t/**\n\t * @public\n\t * @param {DimensionTree} dimensionHierarchy\n\t * */\n\tremoveDimensionHierarchy(dimensionHierarchy) {\n\t\tif (!(dimensionHierarchy instanceof DimensionTree)){\n\t\t\tthrow TypeError('The argument must be instance of DimensionTree')\n\t\t}\n\t\t// first remove members\n\t\tSnowflakeBuilder.destroyDimensionTree(this.getCells(), this.getCells(), dimensionHierarchy, this);\n\t\t// then target dimension hierarchy\n\t\tthis.dimensionHierarchies.splice(this.dimensionHierarchies.indexOf(dimensionHierarchy), 1);\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * @throw {TypeError}\n\t * */\n\tcreateEmptyCells(cellOptions = {}) {\n\t\tif (!isPlainObject(cellOptions)){\n\t\t\tthrow TypeError('Cell option argument must be a pure object')\n\t\t}\n\t\tconst emptyCells = [];\n\t\tconst tuples = Cube.cartesian(this);\n\t\ttuples.forEach(tuple => {\n\t\t\tconst unique = this.dice(tuple).getCells();\n\t\t\tif (!unique.length) {\n\t\t\t\tconst foreignKeysCellData = {};\n\t\t\t\tObject.keys(tuple).forEach(dimension => {\n\t\t\t\t\tconst dimensionTree = getDimensionTreeByDimension.call(this, dimension);\n\t\t\t\t\tconst dimensionTable = dimensionTree.getTreeValue();\n\t\t\t\t\tconst { foreignKey } = dimensionTable;\n\t\t\t\t\tforeignKeysCellData[foreignKey] = dimensionTable.getMemberPrimaryKey(tuple[dimension])\n\t\t\t\t});\n\t\t\t\tconst cellData = {\n\t\t\t\t\t...this.defaultFactOptions,\n\t\t\t\t\t...cellOptions,\n\t\t\t\t\t...foreignKeysCellData,\n\t\t\t\t};\n\t\t\t\t// todo нужна правеврка на то, что все свойства присутствуют, для этого нужна инф-ия о именах таких полей в схеме\n\t\t\t\tconst cell = EmptyCell.createEmptyCell(cellData);\n\t\t\t\temptyCells.push(cell);\n\t\t\t}\n\t\t});\n\t\treturn emptyCells;\n\t}\n\t/**\n\t * @public\n\t * @return {EmptyCell[]}\n\t * */\n\tgetEmptyCells() {\n\t\treturn this.getCells().filter(cell => EmptyCell.isEmptyCell(cell))\n\t}\n\t/**\n\t * @public\n\t * @param {Cell} cell\n\t * @return {boolean}\n\t * */\n\tisEmptyCell(cell) {\n\t\treturn EmptyCell.isEmptyCell(cell);\n\t}\n\t/**\n\t * @public\n\t * @param {EmptyCell[]} emptyCells\n\t * @throw {TypeError}\n\t * */\n\taddEmptyCells(emptyCells) {\n\t\tif (!Array.isArray(emptyCells)){\n\t\t\tthrow TypeError('The argument must be instance of Array')\n\t\t}\n\t\temptyCells.forEach((emptyCell, index) => {\n\t\t\tif (!this.isEmptyCell(emptyCell)) {\n\t\t\t\tthrow TypeError(`Some item in list of argument is not instances of EmptyCell, index: ${index}`)\n\t\t\t}\n\t\t});\n\t\t[].push.apply(this.getCells(), emptyCells);\n\t}\n\t/**\n\t * @public\n\t * Filling method for full size of cube\n\t * @param {object?} cellOptions - properties for empty cells\n\t * */\n\tfillEmptyCells(cellOptions) {\n\t\t// todo why here residuals? add test for that\n\t\tif (!residuals(this).length) {\n\t\t\tconst emptyCells = this.createEmptyCells(cellOptions);\n\t\t\tthis.addEmptyCells(emptyCells);\n\t\t}\n\t}\n\t/**\n\t * Check that the argument is an instance of SubCube\n\t * @return {boolean}\n\t * */\n\tisSubCube(){\n\t\treturn this instanceof SubCube;\n\t}\n\t/**\n\t * Cartesian product - list of all possible tuples\n\t * @param {Cube} cube\n\t * @return {Tuple[]}\n\t * */\n\tstatic cartesian(cube) {\n\t\tif (!(cube instanceof Cube)){\n\t\t\tthrow TypeError('The argument must be instance of Cube')\n\t\t}\n\t\tconst f = (a, b) => [].concat(...a.map(d => {\n\t\t\treturn b.map(e => {\n\t\t\t\treturn [].concat(d, e)\n\t\t\t})\n\t\t}));\n\t\t\n\t\tconst cartesian = (a, b, ...c) => {\n\t\t\treturn b ? cartesian(f(a, b), ...c) : a\n\t\t};\n\t\t\n\t\tconst dimensionsOrder = [];\n\t\t\n\t\tconst set = cube.dimensionHierarchies.map(dimensionTree => dimensionTree.getTreeValue()).map(dimensionTable => {\n\t\t\tdimensionsOrder.push(dimensionTable.dimension);\n\t\t\treturn dimensionTable.members;\n\t\t});\n\t\t\n\t\tconst tupleList = [];\n\t\t\n\t\tlet res;\n\t\tif (set.length) {\n\t\t\tif (set.length > 1) {\n\t\t\t\tres = cartesian.apply(null, set);\n\t\t\t} else {\n\t\t\t\tres = set[0].map(i => [i])\n\t\t\t}\n\t\t\tres.forEach(arr => {\n\t\t\t\tconst item = {};\n\t\t\t\tdimensionsOrder.forEach((dimension, index) => {\n\t\t\t\t\titem[dimension] = arr[index]\n\t\t\t\t});\n\t\t\t\ttupleList.push(new Tuple(item));\n\t\t\t\treturn item;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn tupleList;\n\t}\n}\n\n/**\n * SubCube is the target cube whose members are members of the source cube.\n * */\nclass SubCube extends Cube {\n\tconstructor({originalCube, previousCube, ...rest}){\n\t\tsuper(rest);\n\t\t/** link for chaining between operations */\n\t\tthis.originalCube = originalCube;\n\t\t/** link for chaining between operations */\n\t\tthis.previousCube = previousCube;\n\t}\n}\n\n/**\n * @this {Cube}\n * @return {DimensionHierarchy}\n * */\nfunction getHierarchy(hierarchy) {\n\treturn this.dimensionHierarchies.find(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getHierarchy() === hierarchy\n\t});\n}\n/**\n * @this {Cube}\n * @return {DimensionTree}\n * */\nfunction getDimensionTreeByDimension(dimension) {\n\tlet findDimensionTree;\n\tthis.dimensionHierarchies.forEach(dimensionTree => {\n\t\tconst searchedDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\tif (searchedDimensionTree) {\n\t\t\tfindDimensionTree = dimensionTree.getDimensionTreeByDimension(dimension);\n\t\t}\n\t});\n\tif (!findDimensionTree) {\n\t\tthrow RangeError(`Not existed dimension: ${dimension}`);\n\t}\n\treturn findDimensionTree;\n}\n/**\n * @this {Cube}\n * @return {DimensionTree[]}\n * */\nfunction getDimensionTrees() {\n\treturn this.dimensionHierarchies.map(dimensionHierarchy => {\n\t\treturn dimensionHierarchy.getDimensionTree\n\t\t\t? dimensionHierarchy.getDimensionTree()\n\t\t\t: dimensionHierarchy\n\t})\n}\n/**\n * @private\n * Get facts from cube\n * */\nfunction denormalize(cells = this.getCells(), forSave = true) {\n\tconst data = SnowflakeBuilder.denormalize(cells, getDimensionTrees.call(this));\n\tif (forSave) {\n\t\tdata.forEach((data, index) => {\n\t\t\tif (cells[index] instanceof EmptyCell) {\n\t\t\t\tdelete data[this.factPrimaryKey];\n\t\t\t}\n\t\t})\n\t}\n\treturn data;\n}\n/**\n * @public\n * Residuals - list of tuples, according to which there is more than one member\n * @return {Tuple[]}\n * */\nfunction residuals(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst totalTuples = [];\n\ttuples.forEach(tuple => {\n\t\tconst partFacts = cube.dice(tuple).getFacts();\n\t\tif (partFacts.length > 1) {\n\t\t\ttotalTuples.push(tuple)\n\t\t}\n\t});\n\treturn totalTuples;\n}\n/**\n * Unfilled - list of tuples, in accordance with which there is not a single member\n * @@param {Cube} cube\n * */\nfunction unfilled(cube) {\n\tconst tuples = Cube.cartesian(cube);\n\tconst unfilled = [];\n\ttuples.forEach(tuple => {\n\t\tconst members = this.dice(tuple).getFacts(tuple);\n\t\tif (members.length === 0) {\n\t\t\tunfilled.push(tuple)\n\t\t}\n\t});\n\treturn unfilled;\n}\n\nfunction validateFactData(factPrimaryKey, factData){\n\tif (!factData.hasOwnProperty(factPrimaryKey)) {\n\t\tthrow new NotFoundFactId(factPrimaryKey)\n\t}\n}\n\nexport default Cube"],"names":["InsufficientRollupData","dimension","id","message","NotFoundFactId","name","DimensionException","handleError","error","originalConsole","console","customConsole","log","string","warn","warnOnce","memory","isSimple","value","type","Fact","data","key","hasOwnProperty","Cell","uuidv4","replace","c","r","Math","random","v","toString","EmptyCell","options","generateId","cell","Member","Object","assign","props","primaryKey","isPrototypeOf","Error","memberData","forEach","prop","DEFAULT_TEMPLATE_FOREIGN_KEY","DEFAULT_FACT_ID_PROP","DEFAULT_MEMBER_ID_PROP","InputMember","defaultValue","defaultData","propName","DimensionTable","foreignKey","genericId","keyProps","otherProps","members","defaultMemberOptions","keys","indexOf","concat","map","splice","apply","length","member","push","memberOptions","linkProps","reduceId","create","addMember","index","reduce","acc","curValue","dimensionTable","Tree","getChildTrees","getParentTree","root","traceUpOrder","tracedTreeValue","tracedTree","isRoot","callback","tree","parentTree","treeValue","getTreeValue","childTrees","childTree","tracePostOrder","tracePreOrder","DimensionTree","dimensionTree","level","parentNode","defineProperties","createDimensionTable","editable","enumerable","dimensionTreeData","validateDimensions","dimensions","tracedDimensionTreeValue","getRoot","search","dimensionTreeValue","newDimensionTreeByMember","cloneDimensionTreeWithoutMembers","projectDrillDown","projectDrillUp","projectDrill","traceMethodName","method","lastTracedMembers","lastTracedDimensionTree","tracedDimensionTree","tracedDimension","drillMembers","getDimensionTreeByDimension","setMemberList","clone","clearMemberList","projectionDimensionTree","subtractDimensionTree","endToBeRemovedMember","dimensionProjection","membersProjection","toBeRemovedSpace","memberList","tracedDimensionTable","childMembers","childDimension","currentDimensionTree","removeMember","toBeAddedSpace","parentDimensionTable","parentMembers","parentMember","getMemberForeignKey","getMemberPrimaryKey","isExternal","childDimensionTable","childMember","childIdAttributes","createMember","newDimensionTree","DimensionHierarchy","activeDimension","hierarchy","createDimensionTree","dimensionHierarchy","SnowflakeBuilder","factTable","cells","dimensionsTrees","cellTable","factPrimaryKey","anotherBuildOne","processDimension","childDimensions","existMemberCount","args","makeMemberList","entitiesParts","memberListForFilter","mapFilter","makeMemberListLevel","deleteProps","fact","cellTables","cellTableFiltered","filter","whatIsIt","totalMemberList","countId","entitiesPart","etalon","childIdAttribute","entityPart","startFrom","cache","restoredCache","existedCells","find","surrogateKey","createKeyFromProps","obj","DIVIDER","join","removedCells","dimensionHierarchies","cube","removedCell","travers","removeMembers","bind","restoreCell","dimensionTrees","facts","memberCopy","deleteMemberId","dicedCube","dice","getCells","handlers","handleDimensionTree","idValue","handler","Tuple","Space","newSpace","arg","arguments","space","add","targetSpace","otherSpace","Array","prototype","freeGlobal","global","freeSelf","self","Function","Symbol","objectProto","nativeObjectToString","symToStringTag","toStringTag","undefined","getRawTag","isOwn","call","tag","e","result","objectToString","nullTag","undefinedTag","baseGetTag","overArg","func","transform","getPrototype","getPrototypeOf","isObjectLike","objectTag","funcProto","funcToString","objectCtorString","isPlainObject","proto","Ctor","constructor","Cube","TypeError","defaultFactOptions","createDimensionHierarchy","cellData","isEmptyCell","set","toMultiset","isArray","toOriginal","membersData","RangeError","originalMultiset","dimensionHierarchiesLength","projectionDimensionHierarchies","totalSpaces","dimensionTreeProjection","spacesForCells","searchedInTree","current","unionDimensionTree","totalSpace","union","filteredCellTable","cellBelongsToSpace","somePropOfCellNotBelongToSpace","some","finded","newDimensionHierarchies","originalDimensionHierarchy","projectionDimensionHierarchy","createProxyDimensionTree","memberBelongToCells","filteredCell","has","removeProjectionOntoMember","SubCube","originalCube","previousCube","targetDimension","currentHierarchy","getHierarchy","hasDimension","setActiveDimension","denormalize","validateFactData","getFacts","anotherBuild","getDimensionTrees","removeCells","destroy","customMemberOptions","rollupCoordinatesData","drillDownCoordinatesOptions","getDimensionMembers","childDimensionTrees","foreignKeysMemberData","childDimensionTree","saveMember","saveIdAttribute","parentDimension","parentIdAttribute","drillDownCoordinatesData","fillEmptyCells","endToBeRemoved","getRemoveMeasures","removedMeasures","destroyDimensionTree","cellOptions","emptyCells","tuples","cartesian","tuple","unique","foreignKeysCellData","createEmptyCell","emptyCell","residuals","createEmptyCells","addEmptyCells","f","a","b","d","dimensionsOrder","tupleList","res","i","arr","item","rest","findDimensionTree","searchedDimensionTree","getDimensionTree","forSave","totalTuples","partFacts","factData"],"mappings":"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"}